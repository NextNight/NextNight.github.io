<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kala</title>
  
  <subtitle>Do Best Kala</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nextnight.github.io/"/>
  <updated>2018-08-07T13:44:54.062Z</updated>
  <id>http://nextnight.github.io/</id>
  
  <author>
    <name>Best Kala</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>algorithm-array</title>
    <link href="http://nextnight.github.io/2018/07/31/algorithm-array/"/>
    <id>http://nextnight.github.io/2018/07/31/algorithm-array/</id>
    <published>2018-07-31T15:21:37.000Z</published>
    <updated>2018-08-07T13:44:54.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整数求和"><a href="#整数求和" class="headerlink" title="整数求和"></a>整数求和</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_num_sum</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="string">"""整数各位之和：2018-07-31"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Q: 给一个非负整数，求每一位的数字加和，得到之后的数字在把每一位进行加和，直到结果为一位数</span></span><br><span class="line"><span class="string">    E: 比如：83-&gt;8+3=11-&gt;1+1=2,输出2</span></span><br><span class="line"><span class="string">    case: 尾递归，进入下一层不再需要上一层的环境，因为这个递归完成后不再需要干其他的事，所以直接return这个递归，就会得到最内层的结果</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">if</span> num &gt;= <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> a_num_sum(sum([int(i) <span class="keyword">for</span> i <span class="keyword">in</span> list(str(num))])) <span class="comment"># 没有return就不是一个尾递归，返回结果为none</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果要输出每次计算的值</span></span><br><span class="line">print(num)   <span class="comment"># 83 11 2</span></span><br><span class="line"><span class="keyword">if</span> num &gt;= <span class="number">10</span>:</span><br><span class="line">    a_num_sum(sum([int(i) <span class="keyword">for</span> i <span class="keyword">in</span> list(str(num))]))</span><br><span class="line">print(num)  <span class="comment"># 2,11,83</span></span><br></pre></td></tr></table></figure><h1 id="求两数之和等与目标值"><a href="#求两数之和等与目标值" class="headerlink" title="求两数之和等与目标值"></a>求两数之和等与目标值</h1><h3 id="基础暴力解法"><a href="#基础暴力解法" class="headerlink" title="基础暴力解法"></a>基础暴力解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_sum</span><span class="params">(dt, tag)</span>:</span></span><br><span class="line">    <span class="string">"""整数翻转：2018-07-31"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Q:给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</span></span><br><span class="line"><span class="string">    E:[2,7,3,11] tag:9</span></span><br><span class="line"><span class="string">    R:[0,1]</span></span><br><span class="line"><span class="string">    E:[3,3] tag:6</span></span><br><span class="line"><span class="string">    R:[0,1]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> i,it <span class="keyword">in</span> enumerate(dt):</span><br><span class="line">        <span class="keyword">for</span> j,jt <span class="keyword">in</span> enumerate(dt):</span><br><span class="line">            <span class="keyword">if</span> it+jt==tag <span class="keyword">and</span> i!=j:</span><br><span class="line">                <span class="keyword">return</span> [i,j]</span><br></pre></td></tr></table></figure><p>以下解法同上：看上去没那么高复杂度，其实是一样的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, item <span class="keyword">in</span> enumerate(dt):</span><br><span class="line">     <span class="keyword">if</span> (tag - item) <span class="keyword">in</span> dt <span class="keyword">and</span> dt.index(tag - item)!=i:</span><br><span class="line">         <span class="keyword">return</span> [i, dt.index(tag - item)]</span><br></pre></td></tr></table></figure></p><h3 id="遍历一遍数组解法"><a href="#遍历一遍数组解法" class="headerlink" title="遍历一遍数组解法"></a>遍历一遍数组解法</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hashmap，dict解法，dict中不能存K相同的键值对，</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="built_in">if</span> (<span class="built_in">map</span>.containsKey(complement)) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="built_in">map</span>.<span class="built_in">get</span>(complement), i &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="整数翻转"><a href="#整数翻转" class="headerlink" title="整数翻转"></a>整数翻转</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="string">"""整数翻转：2018-08-01"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Q:给定一个 32 位有符号整数，将整数中的数字进行反转。假设我们的环境只能存储 32 位有符号整数，</span></span><br><span class="line"><span class="string">    其数值范围是 [−2**31,  2**31 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        lens = len(str(num)) - <span class="number">1</span></span><br><span class="line">        sum += (num % <span class="number">10</span>) * <span class="number">10</span>**lens</span><br><span class="line">        num = int(num/<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> lens==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> sum&lt;<span class="number">-2</span>**<span class="number">31</span> <span class="keyword">or</span> sum&gt;<span class="number">2</span>**<span class="number">31</span><span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><h1 id="数组中子序列最大和"><a href="#数组中子序列最大和" class="headerlink" title="数组中子序列最大和"></a>数组中子序列最大和</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_sum_subarry</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="string">"""子串最大和:2018-08-02"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Q:给定一个数组求其子数组和最大的值。</span></span><br><span class="line"><span class="string">    E:[1, -2, 3, 10, -4, 7, 2, -5]</span></span><br><span class="line"><span class="string">    R:[3,10,-4,7,2]=18</span></span><br><span class="line"><span class="string">    trick: 动态规划</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> nums <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">    sum = nums[<span class="number">0</span>]  <span class="comment"># 第i-1个数的最大序列和</span></span><br><span class="line">    cur = nums[<span class="number">0</span>]  <span class="comment"># 第i个数的最大序列和</span></span><br><span class="line">    <span class="keyword">for</span> i, it <span class="keyword">in</span> enumerate(nums[<span class="number">1</span>:]):</span><br><span class="line">        cur = max(cur + it, it)  <span class="comment"># 状态方程：max(sum_i) = max(sum_i-1+num[i],num[i])</span></span><br><span class="line">        <span class="keyword">if</span> sum &lt; cur:</span><br><span class="line">            sum = cur</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><h1 id="数组中最大和的子序列"><a href="#数组中最大和的子序列" class="headerlink" title="数组中最大和的子序列"></a>数组中最大和的子序列</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_subarray</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="string">"""最大和的子串:2018-08-03"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Q:给定一个数组求其子数组和最大的值。</span></span><br><span class="line"><span class="string">    E:[1, -2, 3, 10, -4, 7, 2, -5]</span></span><br><span class="line"><span class="string">    R:[3,10,-4,7,2]=18</span></span><br><span class="line"><span class="string">    trick: 动态规划</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> nums <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">    sum = nums[<span class="number">0</span>]  <span class="comment"># 第i-1个数的最大序列和</span></span><br><span class="line">    cur = nums[<span class="number">0</span>]  <span class="comment"># 第i个数的最大序列和</span></span><br><span class="line">    maxls = [nums[<span class="number">0</span>]]  <span class="comment"># 用于和最大的子序列</span></span><br><span class="line">    <span class="keyword">for</span> i, it <span class="keyword">in</span> enumerate(nums[<span class="number">1</span>:]):</span><br><span class="line">        <span class="comment"># cur = max(cur + it, it) # 状态方程：max(sum_i) = max(sum_i-1+num[i],num[i])</span></span><br><span class="line">        <span class="keyword">if</span> cur + it &gt;= it:</span><br><span class="line">            cur = cur + it</span><br><span class="line">            maxls.append(it)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = it</span><br><span class="line">            maxls = [it]</span><br><span class="line">        <span class="keyword">if</span> sum &lt; cur:</span><br><span class="line">            sum = cur</span><br><span class="line">    <span class="comment"># 去掉子序列尾部的负数</span></span><br><span class="line">    <span class="keyword">while</span> maxls[<span class="number">-1</span>] &lt; <span class="number">0</span>:</span><br><span class="line">        maxls.pop(<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> sum,maxls</span><br></pre></td></tr></table></figure><h1 id="股票的最大利润①"><a href="#股票的最大利润①" class="headerlink" title="股票的最大利润①"></a>股票的最大利润①</h1><p>🦁 link:<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/description/" target="_blank" rel="noopener">Leetcode</a><br>🐇 思路：记录最小值，和最大利润，不断用当前值-最小值去计算利润，如果大于最大利润则更新。保证当前值永远在最小值之后，因为卖出时间必须晚于或等于买入时间。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_stock</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="string">"""股票最大利润-最多购买一次：2018-08-04"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A:</span></span><br><span class="line"><span class="string">    给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。如果你最多只允许完成一笔交易（即买入和卖出一支股票），</span></span><br><span class="line"><span class="string">    设计一个算法来计算你所能获取的最大利润</span></span><br><span class="line"><span class="string">    E:[7,1,5,3,6,4]</span></span><br><span class="line"><span class="string">    R:[1,6] = 5</span></span><br><span class="line"><span class="string">    E:[7,6,4,3,1]</span></span><br><span class="line"><span class="string">    R:0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) == <span class="number">1</span> <span class="keyword">or</span> nums==<span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    mins = nums[<span class="number">0</span>]</span><br><span class="line">    stock = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">        mins = min(it,mins)</span><br><span class="line">        stock = max(it-mins,stock)</span><br><span class="line">    <span class="keyword">return</span> stock</span><br></pre></td></tr></table></figure></p><h1 id="股票的最大利润②"><a href="#股票的最大利润②" class="headerlink" title="股票的最大利润②"></a>股票的最大利润②</h1><p>🦁 link:<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/description/" target="_blank" rel="noopener">Leetcode</a><br>🐇 思路：找到所有的上升区域，每个区域的差值之和就是总利润。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_stock_all</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="string">"""股票最大利润-购买多次不限次数：：2018-08-05"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    E:[7,1,5,3,6,4]</span></span><br><span class="line"><span class="string">    R:5-1+6-3=7</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> len(nums)==<span class="number">1</span> <span class="keyword">or</span> nums==<span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    stock = <span class="number">0</span></span><br><span class="line">    min = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">        <span class="keyword">if</span> it&gt;min:</span><br><span class="line">            stock +=it-min</span><br><span class="line">        min = it</span><br><span class="line">    <span class="keyword">return</span> stock</span><br></pre></td></tr></table></figure></p><h1 id="股票购买最大利润③"><a href="#股票购买最大利润③" class="headerlink" title="股票购买最大利润③"></a>股票购买最大利润③</h1><p>🦁link:<br>🐇思路：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_stock_two</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""股票最大利润-购买次数为2：：2018-08-06"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h1 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h1><p>🦁link:<a href="https://leetcode-cn.com/problems/transpose-matrix/description/" target="_blank" rel="noopener">Leetcode</a><br>🐇思路：二维数组每一个元素的下标i行，j列变j行i列，即a[j][i] =a[i][j]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transpose</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="string">"""转置矩阵:2018-08-07"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    E:[[1,2,3],[4,5,6]]</span></span><br><span class="line"><span class="string">    R:[[1,4],[2,5],[3,6]]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># r行，c列 转置得到c行r列</span></span><br><span class="line">    r,c = len(A),len(A[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 定义一个c,行r列的矩阵</span></span><br><span class="line">    rs = [ [<span class="keyword">None</span>]*r <span class="keyword">for</span> i <span class="keyword">in</span> np.arange(c)]</span><br><span class="line">    <span class="keyword">for</span> r,row <span class="keyword">in</span> enumerate(A):</span><br><span class="line">        <span class="keyword">for</span> c,it <span class="keyword">in</span> enumerate(row):</span><br><span class="line">            rs[c][r] = it</span><br><span class="line">    <span class="keyword">return</span> rs</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;整数求和&quot;&gt;&lt;a href=&quot;#整数求和&quot; class=&quot;headerlink&quot; title=&quot;整数求和&quot;&gt;&lt;/a&gt;整数求和&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
      <category term="algorithm" scheme="http://nextnight.github.io/categories/algorithm/"/>
    
    
      <category term="array" scheme="http://nextnight.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>不忘初心</title>
    <link href="http://nextnight.github.io/2018/07/30/%E4%B8%8D%E5%BF%98%E5%88%9D%E5%BF%83/"/>
    <id>http://nextnight.github.io/2018/07/30/不忘初心/</id>
    <published>2018-07-30T14:16:33.000Z</published>
    <updated>2018-08-13T08:35:57.860Z</updated>
    
    <content type="html"><![CDATA[<script type="text/x-mathjax-config">MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});</script><p>不忘初心，方得始终<br>初心易守，始终难得</p><p>物来顺应<br>未来不迎<br>当时不杂<br>既过不恋</p><p>$$(\frac12)(12)(12)$$</p><p>$$\begin{matrix}<br>1 &amp; x &amp; x^2 \\<br>1 &amp; y &amp; y^2 \\<br>1 &amp; z &amp; z^2 \\<br>\end{matrix}$$</p><p>$$\frac { dy }{ dx } =\frac { { e }^{ x } }{ 3{ y }^{ 2 } }$$</p><p>$$\lim _{ x\rightarrow \infty  }{ \sum _{ k=1 }^{ x }{ \frac { \sin { k } +\cos { k }  }{ k }  }  } $$</p><p>$$<br>H=-\sum_{i=1}^N (\sigma_{i}^x \sigma_{i+1}^x+g \sigma_{i}^z)<br>$$</p><p>$$f(n) = \begin{cases} \frac{n}{2}, &amp; \text{if } n\text{ is even}\ 3n+1, &amp; \text{if } n\text{ is odd} \end{cases}$$</p><p>$$f(n) = \begin{cases} \frac{n}{2},\text{if } n\text{ is even}\ 3n+1,\text{if } n\text{ is odd} \end{cases}$$<br>$f(x)=ax+b$</p><p>$$\left \lbrace \sum_{i=0}^n i^3 = \frac{(n^2+n)(n+6)}{9} \right \rbrace$$<br>$$ \lbrace \sum_{i=0}^n i^3 = \frac{(n^2+n)(n+6)}{9}  \rbrace$$<br>$\frac xy$<br>$ x+3 \over y+5 $</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/x-mathjax-config&quot;&gt;
MathJax.Hub.Config({
tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]}
});
&lt;/script&gt;

&lt;p&gt;不忘初心，方得始终&lt;br&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
