<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kala</title>
  
  <subtitle>Do Best Kala</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nextnight.github.io/"/>
  <updated>2018-09-10T14:17:25.642Z</updated>
  <id>http://nextnight.github.io/</id>
  
  <author>
    <name>Best Kala</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python代码片段</title>
    <link href="http://nextnight.github.io/2018/09/10/Python%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>http://nextnight.github.io/2018/09/10/Python代码片段/</id>
    <published>2018-09-10T14:03:51.000Z</published>
    <updated>2018-09-10T14:17:25.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多变量赋值"><a class="markdownIt-Anchor" href="#多变量赋值"></a> 多变量赋值</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d = <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br></pre></td></tr></table></figure><h1 id="列表赋值"><a class="markdownIt-Anchor" href="#列表赋值"></a> 列表赋值</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">"ami"</span>, <span class="string">"kimi"</span>, <span class="string">"jsm"</span>]</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">b</span>, c = names</span><br></pre></td></tr></table></figure><h1 id="条件表达式"><a class="markdownIt-Anchor" href="#条件表达式"></a> 条件表达式</h1><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = 8</span><br><span class="line">d = x if x &gt; 5 <span class="keyword">else</span> 10</span><br></pre></td></tr></table></figure><h1 id="列表推导式"><a class="markdownIt-Anchor" href="#列表推导式"></a> 列表推导式</h1><pre><code>a = [i for i in range(1000) if i % 2 == 0]</code></pre><h1 id="条件判断不是用and"><a class="markdownIt-Anchor" href="#条件判断不是用and"></a> 条件判断:不是用and</h1><pre><code>x = 90if 80 &lt; x &lt; 100: print(x)</code></pre><h1 id="判断是否在不在某列表字符串"><a class="markdownIt-Anchor" href="#判断是否在不在某列表字符串"></a> 判断是否在/不在某列表,字符串</h1><pre><code>if 1 in [1, 2, 3]: print(1)if 1 not in [1, 2, 3]: print(0)if '1' in &quot;123&quot;: print(2)if '1' not in &quot;123&quot;: print(2)</code></pre><h1 id="隐含类型转换判空"><a class="markdownIt-Anchor" href="#隐含类型转换判空"></a> 隐含类型转换判空</h1><pre><code>a, b, c, d = [1, 2, 3], {}, '', []if a:print(&quot;a not empty&quot;)if b:print(&quot;b not empty&quot;)if c:print(&quot;c not empty&quot;)if d:print(&quot;d not empty&quot;)</code></pre><h1 id="判断多个条件是否成立anyall"><a class="markdownIt-Anchor" href="#判断多个条件是否成立anyall"></a> 判断多个条件是否成立:any，all</h1><pre><code>a, b, c = 1, 2, 3if any([a &gt; 1, b &lt; 2, c == 3]): pass  # === a&gt;1 or b&lt;2 or c==3if all([a &gt; 1, b &lt; 2, c == 3]): pass  # === a&gt;1 and b&lt;2 and c==3</code></pre><h1 id="列表推导式过滤"><a class="markdownIt-Anchor" href="#列表推导式过滤"></a> 列表推导式+过滤</h1><pre><code>ls = [1, 2, 3, &quot;a&quot;, 4, &quot;v&quot;, 5.5]rs = [i for i in ls if type(i) in [int, float]]print(rs)</code></pre><h1 id="同时获取下标和数据enumerate"><a class="markdownIt-Anchor" href="#同时获取下标和数据enumerate"></a> 同时获取下标和数据：enumerate</h1><pre><code>nums = [1, 2, 3, 4]for index, num in enumerate(nums):  print(&quot;索引为{}的数据是{}&quot;.format(index, num))</code></pre><h1 id="线程sleep"><a class="markdownIt-Anchor" href="#线程sleep"></a> 线程sleep</h1><pre><code>import timetime.sleep(1)  # 休眠1秒</code></pre><h1 id="print-输出覆盖"><a class="markdownIt-Anchor" href="#print-输出覆盖"></a> print 输出覆盖</h1><pre><code>i, n = 0, 100for i in range(n):time.sleep(0.1)if (i + 1) % 10 == 0: print(i + 1, end = '\r')</code></pre><h1 id="lambda匿名函数"><a class="markdownIt-Anchor" href="#lambda匿名函数"></a> lambda匿名函数</h1><pre><code>names = ['a', 'b', 'xxx', 'vx', 'ccc']rs = filter(lambda x:len(x) &lt;= 1, names)print(list(rs))  # ['a', 'b']</code></pre><h1 id="yield生成器收集系列值不需要return"><a class="markdownIt-Anchor" href="#yield生成器收集系列值不需要return"></a> yield生成器收集系列值，不需要return</h1><pre><code>def fun():a = 0for i in range(10):a += iyield a# [0, 1, 3, 6, 10, 15, 21, 28, 36, 45]print(list(fun()))</code></pre><h1 id="装饰器给函数添加插入日志性能测试等非核心功能"><a class="markdownIt-Anchor" href="#装饰器给函数添加插入日志性能测试等非核心功能"></a> 装饰器给函数添加插入日志，性能测试等非核心功能</h1><pre><code>def runtime(func):def wrapper(*args, **kwargs):start = time.time()result = func(*args, **kwargs)end = time.time()print(&quot;{} is called,used {}s.&quot;.format(func.__name__, start - end))return resultreturn (wrapper)@runtimedef process():s = 0for i in range(100):time.sleep(1)s += iprocess()</code></pre><h1 id="3-copy"><a class="markdownIt-Anchor" href="#3-copy"></a> 3、<mark><mark><mark><mark><mark>copy</mark></mark></mark></mark></mark></h1><p>使用：copy包中的copy()函数和deepcopy()函数</p><h3 id="31赋值指向同一块地址"><a class="markdownIt-Anchor" href="#31赋值指向同一块地址"></a> 3.1：赋值：指向同一块地址</h3><pre><code>a = {1: [1, 2, 3]}print('a的内存地址 %s' % id(a))      # 4386109840print('a1的内存地址 %s' % id(a[1]))  # 4391711560b = a</code></pre><h3 id="32浅拷贝指向不同的引用但是不同引用指向相同内容只拷贝对象但不拷贝对象内部的对象"><a class="markdownIt-Anchor" href="#32浅拷贝指向不同的引用但是不同引用指向相同内容只拷贝对象但不拷贝对象内部的对象"></a> 3.2：浅拷贝：指向不同的引用，但是不同引用指向相同内容(只拷贝对象，但不拷贝对象内部的对象)</h3><pre><code>b = copy.copy(a)print('a的内存地址 %s' % id(a))      # 4386109840print('b的内存地址 %s' % id(b))      # 4386110200print('a1的内存地址 %s' % id(a[1]))  # 4391711560print('b1的内存地址 %s' % id(b[1]))  # 4391711560</code></pre><h3 id="33深拷贝对象及对象内部的对象都复制一份"><a class="markdownIt-Anchor" href="#33深拷贝对象及对象内部的对象都复制一份"></a> 3.3：深拷贝：对象及对象内部的对象都复制一份</h3><pre><code>b = copy.deepcopy(a)print('a的内存地址 %s' % id(a))      # 4386109840print('b的内存地址 %s' % id(b))      # 4391729264print('a1的内存地址 %s' % id(a[1]))  # 4391711560print('b1的内存地址 %s' % id(b[1]))  # 4391711368</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多变量赋值&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#多变量赋值&quot;&gt;&lt;/a&gt; 多变量赋值&lt;/h1&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="Python" scheme="http://nextnight.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://nextnight.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法</title>
    <link href="http://nextnight.github.io/2018/08/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>http://nextnight.github.io/2018/08/14/数据结构与算法/</id>
    <published>2018-08-14T03:57:08.000Z</published>
    <updated>2018-08-27T06:56:00.076Z</updated>
    
    <content type="html"><![CDATA[<p>是时候沉下心来学习一波数据结构与算法了，好的算法能够轻松的而解决各种难题，而好的数据结构是实现算法的前提，算法设计依托与不同的数据结构，同样，算法也是解决不同形式的数据问题。计划步骤：</p><ul><li>1、深入操作基本数据结构</li><li>2、深入回顾基础算法</li><li>3、深入理解基本算法思想</li><li>4、算法刷题，书籍阅读</li></ul><p># 算法思想</p><ul><li><p>递归</p></li><li><p>穷举</p></li><li><p>递推</p></li><li><p>贪心</p></li><li><p>回溯</p></li><li><p>分治</p></li><li><p>动态规划</p></li></ul><p># 数据结构</p><ul><li><p>数组</p></li><li><p>链表</p></li><li><p>栈</p></li><li><p>队列</p></li><li><p>字符串</p></li><li><p>🌲树</p></li><li><p>trie树</p></li><li><p>哈希</p></li><li><p>图</p></li></ul><h1 id="基础算法"><a class="markdownIt-Anchor" href="#基础算法"></a> 基础算法</h1><p>#### 排序</p><ul><li><p>交换排序</p><ul><li><p>选择排序</p></li><li><p>插入排序</p></li><li><p>冒泡排序</p></li><li><p>快速排序</p></li><li><p>堆排序</p></li><li><p>希尔排序</p></li><li><p>归并排序</p></li></ul></li><li><p>线性排序</p><ul><li>桶排序</li></ul></li></ul><h4 id="查找"><a class="markdownIt-Anchor" href="#查找"></a> 查找</h4><ul><li><p>顺序查找</p></li><li><p>二分查找</p></li><li><p>分块查找</p></li><li><p>动态查找</p><ul><li><p>二叉排序树</p></li><li><p>平衡二叉树</p></li><li><p>B树，B+树</p></li></ul></li><li><p>Hash查找</p></li></ul><h1 id="经典算法"><a class="markdownIt-Anchor" href="#经典算法"></a> 经典算法</h1><ul><li><p>快速排序</p></li><li><p>BFS/DFS</p></li><li><p>KMP</p></li><li><p>A*寻路</p></li><li><p>Dijkstra</p></li><li><p>遗传算法</p></li><li><p>动态规划</p></li></ul><h1 id="海量数据处理"><a class="markdownIt-Anchor" href="#海量数据处理"></a> 海量数据处理</h1><ul><li><p>Hash</p></li><li><p>Bitmap</p></li><li><p>Bloom filter</p></li><li><p>Trie树</p></li><li><p>Index</p></li><li><p>Inverted Index</p></li><li><p>simhash</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;是时候沉下心来学习一波数据结构与算法了，好的算法能够轻松的而解决各种难题，而好的数据结构是实现算法的前提，算法设计依托与不同的数据结构，同样，算法也是解决不同形式的数据问题。计划步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、深入操作基本数据结构&lt;/li&gt;
&lt;li&gt;2、深入回顾基础
      
    
    </summary>
    
      <category term="算法" scheme="http://nextnight.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://nextnight.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://nextnight.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>algorithm-array</title>
    <link href="http://nextnight.github.io/2018/07/31/algorithm-array/"/>
    <id>http://nextnight.github.io/2018/07/31/algorithm-array/</id>
    <published>2018-07-31T15:21:37.000Z</published>
    <updated>2018-08-07T13:44:54.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整数求和"><a class="markdownIt-Anchor" href="#整数求和"></a> 整数求和</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_num_sum</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="string">"""整数各位之和：2018-07-31"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Q: 给一个非负整数，求每一位的数字加和，得到之后的数字在把每一位进行加和，直到结果为一位数</span></span><br><span class="line"><span class="string">    E: 比如：83-&gt;8+3=11-&gt;1+1=2,输出2</span></span><br><span class="line"><span class="string">    case: 尾递归，进入下一层不再需要上一层的环境，因为这个递归完成后不再需要干其他的事，所以直接return这个递归，就会得到最内层的结果</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">if</span> num &gt;= <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> a_num_sum(sum([int(i) <span class="keyword">for</span> i <span class="keyword">in</span> list(str(num))])) <span class="comment"># 没有return就不是一个尾递归，返回结果为none</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果要输出每次计算的值</span></span><br><span class="line">print(num)   <span class="comment"># 83 11 2</span></span><br><span class="line"><span class="keyword">if</span> num &gt;= <span class="number">10</span>:</span><br><span class="line">    a_num_sum(sum([int(i) <span class="keyword">for</span> i <span class="keyword">in</span> list(str(num))]))</span><br><span class="line">print(num)  <span class="comment"># 2,11,83</span></span><br></pre></td></tr></table></figure><h1 id="求两数之和等与目标值"><a class="markdownIt-Anchor" href="#求两数之和等与目标值"></a> 求两数之和等与目标值</h1><h3 id="基础暴力解法"><a class="markdownIt-Anchor" href="#基础暴力解法"></a> 基础暴力解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_sum</span><span class="params">(dt, tag)</span>:</span></span><br><span class="line">    <span class="string">"""整数翻转：2018-07-31"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Q:给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</span></span><br><span class="line"><span class="string">    E:[2,7,3,11] tag:9</span></span><br><span class="line"><span class="string">    R:[0,1]</span></span><br><span class="line"><span class="string">    E:[3,3] tag:6</span></span><br><span class="line"><span class="string">    R:[0,1]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> i,it <span class="keyword">in</span> enumerate(dt):</span><br><span class="line">        <span class="keyword">for</span> j,jt <span class="keyword">in</span> enumerate(dt):</span><br><span class="line">            <span class="keyword">if</span> it+jt==tag <span class="keyword">and</span> i!=j:</span><br><span class="line">                <span class="keyword">return</span> [i,j]</span><br></pre></td></tr></table></figure><p>以下解法同上：看上去没那么高复杂度，其实是一样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, item <span class="keyword">in</span> enumerate(dt):</span><br><span class="line">     <span class="keyword">if</span> (tag - item) <span class="keyword">in</span> dt <span class="keyword">and</span> dt.index(tag - item)!=i:</span><br><span class="line">         <span class="keyword">return</span> [i, dt.index(tag - item)]</span><br></pre></td></tr></table></figure><h3 id="遍历一遍数组解法"><a class="markdownIt-Anchor" href="#遍历一遍数组解法"></a> 遍历一遍数组解法</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hashmap，dict解法，dict中不能存K相同的键值对，</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="built_in">if</span> (<span class="built_in">map</span>.containsKey(complement)) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="built_in">map</span>.<span class="built_in">get</span>(complement), i &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="整数翻转"><a class="markdownIt-Anchor" href="#整数翻转"></a> 整数翻转</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="string">"""整数翻转：2018-08-01"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Q:给定一个 32 位有符号整数，将整数中的数字进行反转。假设我们的环境只能存储 32 位有符号整数，</span></span><br><span class="line"><span class="string">    其数值范围是 [−2**31,  2**31 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        lens = len(str(num)) - <span class="number">1</span></span><br><span class="line">        sum += (num % <span class="number">10</span>) * <span class="number">10</span>**lens</span><br><span class="line">        num = int(num/<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> lens==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> sum&lt;<span class="number">-2</span>**<span class="number">31</span> <span class="keyword">or</span> sum&gt;<span class="number">2</span>**<span class="number">31</span><span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><h1 id="数组中子序列最大和"><a class="markdownIt-Anchor" href="#数组中子序列最大和"></a> 数组中子序列最大和</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_sum_subarry</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="string">"""子串最大和:2018-08-02"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Q:给定一个数组求其子数组和最大的值。</span></span><br><span class="line"><span class="string">    E:[1, -2, 3, 10, -4, 7, 2, -5]</span></span><br><span class="line"><span class="string">    R:[3,10,-4,7,2]=18</span></span><br><span class="line"><span class="string">    trick: 动态规划</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> nums <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">    sum = nums[<span class="number">0</span>]  <span class="comment"># 第i-1个数的最大序列和</span></span><br><span class="line">    cur = nums[<span class="number">0</span>]  <span class="comment"># 第i个数的最大序列和</span></span><br><span class="line">    <span class="keyword">for</span> i, it <span class="keyword">in</span> enumerate(nums[<span class="number">1</span>:]):</span><br><span class="line">        cur = max(cur + it, it)  <span class="comment"># 状态方程：max(sum_i) = max(sum_i-1+num[i],num[i])</span></span><br><span class="line">        <span class="keyword">if</span> sum &lt; cur:</span><br><span class="line">            sum = cur</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure><h1 id="数组中最大和的子序列"><a class="markdownIt-Anchor" href="#数组中最大和的子序列"></a> 数组中最大和的子序列</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_subarray</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="string">"""最大和的子串:2018-08-03"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Q:给定一个数组求其子数组和最大的值。</span></span><br><span class="line"><span class="string">    E:[1, -2, 3, 10, -4, 7, 2, -5]</span></span><br><span class="line"><span class="string">    R:[3,10,-4,7,2]=18</span></span><br><span class="line"><span class="string">    trick: 动态规划</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> nums <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">    sum = nums[<span class="number">0</span>]  <span class="comment"># 第i-1个数的最大序列和</span></span><br><span class="line">    cur = nums[<span class="number">0</span>]  <span class="comment"># 第i个数的最大序列和</span></span><br><span class="line">    maxls = [nums[<span class="number">0</span>]]  <span class="comment"># 用于和最大的子序列</span></span><br><span class="line">    <span class="keyword">for</span> i, it <span class="keyword">in</span> enumerate(nums[<span class="number">1</span>:]):</span><br><span class="line">        <span class="comment"># cur = max(cur + it, it) # 状态方程：max(sum_i) = max(sum_i-1+num[i],num[i])</span></span><br><span class="line">        <span class="keyword">if</span> cur + it &gt;= it:</span><br><span class="line">            cur = cur + it</span><br><span class="line">            maxls.append(it)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur = it</span><br><span class="line">            maxls = [it]</span><br><span class="line">        <span class="keyword">if</span> sum &lt; cur:</span><br><span class="line">            sum = cur</span><br><span class="line">    <span class="comment"># 去掉子序列尾部的负数</span></span><br><span class="line">    <span class="keyword">while</span> maxls[<span class="number">-1</span>] &lt; <span class="number">0</span>:</span><br><span class="line">        maxls.pop(<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> sum,maxls</span><br></pre></td></tr></table></figure><h1 id="股票的最大利润1"><a class="markdownIt-Anchor" href="#股票的最大利润1"></a> 股票的最大利润①</h1><p>🦁 link:<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/description/" target="_blank" rel="noopener">Leetcode</a><br>🐇 思路：记录最小值，和最大利润，不断用当前值-最小值去计算利润，如果大于最大利润则更新。保证当前值永远在最小值之后，因为卖出时间必须晚于或等于买入时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_stock</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="string">"""股票最大利润-最多购买一次：2018-08-04"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A:</span></span><br><span class="line"><span class="string">    给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。如果你最多只允许完成一笔交易（即买入和卖出一支股票），</span></span><br><span class="line"><span class="string">    设计一个算法来计算你所能获取的最大利润</span></span><br><span class="line"><span class="string">    E:[7,1,5,3,6,4]</span></span><br><span class="line"><span class="string">    R:[1,6] = 5</span></span><br><span class="line"><span class="string">    E:[7,6,4,3,1]</span></span><br><span class="line"><span class="string">    R:0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) == <span class="number">1</span> <span class="keyword">or</span> nums==<span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    mins = nums[<span class="number">0</span>]</span><br><span class="line">    stock = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">        mins = min(it,mins)</span><br><span class="line">        stock = max(it-mins,stock)</span><br><span class="line">    <span class="keyword">return</span> stock</span><br></pre></td></tr></table></figure><h1 id="股票的最大利润2"><a class="markdownIt-Anchor" href="#股票的最大利润2"></a> 股票的最大利润②</h1><p>🦁 link:<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/description/" target="_blank" rel="noopener">Leetcode</a><br>🐇 思路：找到所有的上升区域，每个区域的差值之和就是总利润。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_stock_all</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="string">"""股票最大利润-购买多次不限次数：：2018-08-05"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    E:[7,1,5,3,6,4]</span></span><br><span class="line"><span class="string">    R:5-1+6-3=7</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> len(nums)==<span class="number">1</span> <span class="keyword">or</span> nums==<span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    stock = <span class="number">0</span></span><br><span class="line">    min = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">        <span class="keyword">if</span> it&gt;min:</span><br><span class="line">            stock +=it-min</span><br><span class="line">        min = it</span><br><span class="line">    <span class="keyword">return</span> stock</span><br></pre></td></tr></table></figure><h1 id="股票购买最大利润3"><a class="markdownIt-Anchor" href="#股票购买最大利润3"></a> 股票购买最大利润③</h1><p>🦁link:<br>🐇思路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_stock_two</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""股票最大利润-购买次数为2：：2018-08-06"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h1 id="矩阵转置"><a class="markdownIt-Anchor" href="#矩阵转置"></a> 矩阵转置</h1><p>🦁link:<a href="https://leetcode-cn.com/problems/transpose-matrix/description/" target="_blank" rel="noopener">Leetcode</a><br>🐇思路：二维数组每一个元素的下标i行，j列变j行i列，即a[j][i] =a[i][j]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transpose</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="string">"""转置矩阵:2018-08-07"""</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    E:[[1,2,3],[4,5,6]]</span></span><br><span class="line"><span class="string">    R:[[1,4],[2,5],[3,6]]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># r行，c列 转置得到c行r列</span></span><br><span class="line">    r,c = len(A),len(A[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 定义一个c,行r列的矩阵</span></span><br><span class="line">    rs = [ [<span class="keyword">None</span>]*r <span class="keyword">for</span> i <span class="keyword">in</span> np.arange(c)]</span><br><span class="line">    <span class="keyword">for</span> r,row <span class="keyword">in</span> enumerate(A):</span><br><span class="line">        <span class="keyword">for</span> c,it <span class="keyword">in</span> enumerate(row):</span><br><span class="line">            rs[c][r] = it</span><br><span class="line">    <span class="keyword">return</span> rs</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;整数求和&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#整数求和&quot;&gt;&lt;/a&gt; 整数求和&lt;/h1&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="algorithm" scheme="http://nextnight.github.io/categories/algorithm/"/>
    
    
      <category term="array" scheme="http://nextnight.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>不忘初心</title>
    <link href="http://nextnight.github.io/2018/07/30/%E4%B8%8D%E5%BF%98%E5%88%9D%E5%BF%83/"/>
    <id>http://nextnight.github.io/2018/07/30/不忘初心/</id>
    <published>2018-07-30T14:16:33.000Z</published>
    <updated>2018-08-14T03:55:09.996Z</updated>
    
    <content type="html"><![CDATA[<script type="text/x-mathjax-config">MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)'],['\\','\\']]}});</script><p>不忘初心，方得始终<br>初心易守，始终难得</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>)</mo><mo>(</mo><mn>1</mn><mn>2</mn><mo>)</mo><mo>(</mo><mn>1</mn><mn>2</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">(\frac12)(12)(12)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.32144em;"></span><span class="strut bottom" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="base"><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord">2</span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord">1</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">2</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>y</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>z</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{matrix}1 &amp; x &amp; x^2 \\\\1 &amp; y &amp; y^2 \\\\1 &amp; z &amp; z^2 \\\\\end{matrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:3.850000000000001em;"></span><span class="strut bottom" style="height:7.200000000000001em;vertical-align:-3.35em;"></span><span class="base"><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.850000000000001em;"><span style="top:-6.010000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.810000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.009999999999999953em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.35em;"></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.850000000000001em;"><span style="top:-6.010000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit">x</span></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.850000000000001em;"><span style="top:-6.010000000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathit">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.2100000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>y</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mi>x</mi></msup></mrow><mrow><mn>3</mn><msup><mi>y</mi><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac { dy }{ dx } =\frac { { e }^{ x } }{ 3{ y }^{ 2 } }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.37144em;"></span><span class="strut bottom" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="base"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit">d</span><span class="mord mathit">x</span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.6770000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit">d</span><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.341392em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord"><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathit">e</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">x</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mi>lim</mi><mo>⁡</mo><mrow><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></munderover><mrow><mfrac><mrow><mi>sin</mi><mo>⁡</mo><mrow><mi>k</mi></mrow><mo>+</mo><mi>cos</mi><mo>⁡</mo><mrow><mi>k</mi></mrow></mrow><mrow><mi>k</mi></mrow></mfrac></mrow></mrow></mrow><annotation encoding="application/x-tex">\lim_{ x\rightarrow \infty  }{ \sum_{ k=1 }^{ x }{ \frac { \sin { k } +\cos { k }  }{ k }  }  } </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.6513970000000002em;"></span><span class="strut bottom" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="base"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mop">cos</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mo>(</mo><msubsup><mi>σ</mi><mi>i</mi><mi>x</mi></msubsup><msubsup><mi>σ</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mi>x</mi></msubsup><mo>+</mo><mi>g</mi><msubsup><mi>σ</mi><mi>i</mi><mi>z</mi></msubsup><mo>)</mo></mrow><annotation encoding="application/x-tex">H=-\sum_{i=1}^N (\sigma_{i}^x \sigma_{i+1}^x+g \sigma_{i}^z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.8283360000000002em;"></span><span class="strut bottom" style="height:3.106005em;vertical-align:-1.277669em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"></span></span></span></span></span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714392em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305331em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi>n</mi></mrow><mrow><mn>2</mn></mrow></mfrac><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mi>m</mi><mi>p</mi><mo separator="true">;</mo><mtext>if </mtext><mi>n</mi><mtext> is even</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> </mtext><mn>3</mn><mi>n</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mi>m</mi><mi>p</mi><mo separator="true">;</mo><mtext>if </mtext><mi>n</mi><mtext> is odd</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f(n) = \begin{cases} \frac{n}{2}, &amp;amp; \text{if } n\text{ is even}\\\ 3n+1, &amp;amp; \text{if } n\text{ is odd} \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.75em;"></span><span class="strut bottom" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mspace"> </span><span class="mord">3</span><span class="mord mathit">n</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathit">a</span><span class="mord mathit">m</span><span class="mord mathit">p</span><span class="mpunct">;</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord">if </span></span><span class="mord mathit">n</span><span class="mord text"><span class="mord"> is even</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathit">a</span><span class="mord mathit">m</span><span class="mord mathit">p</span><span class="mpunct">;</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord">if </span></span><span class="mord mathit">n</span><span class="mord text"><span class="mord"> is odd</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">f(x)=ax+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord mathit">a</span><span class="mord mathit">x</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">b</span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">{</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></munderover><msup><mi>i</mi><mn>3</mn></msup><mo>=</mo><mfrac><mrow><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi><mo>)</mo><mo>(</mo><mi>n</mi><mo>+</mo><mn>6</mn><mo>)</mo></mrow><mrow><mn>9</mn></mrow></mfrac><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">\left \lbrace \sum_{i=0}^n i^3 = \frac{(n^2+n)(n+6)}{9} \right \rbrace</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.75em;"></span><span class="strut bottom" style="height:3.027669em;vertical-align:-1.277669em;"></span><span class="base"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">n</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord">6</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">}</span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>{</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></munderover><msup><mi>i</mi><mn>3</mn></msup><mo>=</mo><mfrac><mrow><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>n</mi><mo>)</mo><mo>(</mo><mi>n</mi><mo>+</mo><mn>6</mn><mo>)</mo></mrow><mrow><mn>9</mn></mrow></mfrac><mo>}</mo></mrow><annotation encoding="application/x-tex">\lbrace \sum_{i=0}^n i^3 = \frac{(n^2+n)(n+6)}{9}  \rbrace</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.6513970000000002em;"></span><span class="strut bottom" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="base"><span class="mopen">{</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathit">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">n</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord">6</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">}</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>x</mi><mi>y</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac xy</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.695392em;"></span><span class="strut bottom" style="height:1.1764999999999999em;vertical-align:-0.481108em;"></span><span class="base"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br>$ x+3 \over y+5 $</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/x-mathjax-config&quot;&gt;
MathJax.Hub.Config({
tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;],[&#39;\\&#39;,&#39;\\&#39;]]}
});
&lt;/script&gt;
&lt;p&gt;不忘
      
    
    </summary>
    
    
  </entry>
  
</feed>
