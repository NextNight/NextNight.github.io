<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kala</title>
  
  <subtitle>Do Best Kala</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nextnight.github.io/"/>
  <updated>2018-09-30T10:18:52.595Z</updated>
  <id>http://nextnight.github.io/</id>
  
  <author>
    <name>Best Kala</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Match-文本数据操作</title>
    <link href="http://nextnight.github.io/2018/09/30/Match-%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/"/>
    <id>http://nextnight.github.io/2018/09/30/Match-文本数据操作/</id>
    <published>2018-09-30T03:58:57.000Z</published>
    <updated>2018-09-30T10:18:52.595Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里主要是记录文本相关的比赛中积累的代码片段和操作，量变产生质变，每一次探索和积累都是一小步的成长，不求走的多快，多远，我一直在行走，在努力。</p></blockquote><p>文本数据的处理主要是<code>分词</code>，<code>去停用词</code>(停用词中包括各种特殊符号以及对于构造向量无关的词)，<code>向量化</code>（词袋模型，词嵌入），词嵌入涉及到的词向量的训练。得到向量化的数据之后基本就同结构化数据一样操作了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入数据，方便后续操作,数据其中一列为sentence,即文本内容</span></span><br><span class="line">train = pd.read_csv(<span class="string">"data/train.csv"</span>,index=<span class="keyword">None</span>, encoding=<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><h2 id="1-数据查看"><a class="markdownIt-Anchor" href="#1-数据查看"></a> 1、数据查看</h2><blockquote><p>文本数据一般会查看数据的长度，确定是长文本还是短文本，我们还可以分析文本对于固定模式的首尾相同的数据进行首尾数据额删除，不过至于删除多少需要测试，首尾多长的文本会是相同的内容，可以采用编辑距离计算一个平均距离，选取不同的长度分别得到平均距离，可以最终选择一个平均距离最短对应的长度作为我们要删除的文本长度。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_date</span><span class="params">()</span>：</span></span><br><span class="line"><span class="function">  # 文本为字符串</span></span><br><span class="line">  train['len'] = train['sentence'].apply(lambda x:len(x))</span><br><span class="line">  train[<span class="string">'len'</span>].describe()</span><br><span class="line">  <span class="comment"># 文本已经切分</span></span><br><span class="line">  train[<span class="string">'len'</span>] = train[<span class="string">'sentence'</span>].apply(<span class="keyword">lambda</span> x:len(x.split(<span class="string">' '</span>)))</span><br><span class="line">  train[<span class="string">'len'</span>].describe()</span><br><span class="line">  <span class="comment"># 文章长度分箱</span></span><br><span class="line">  bins = [<span class="number">0</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">1000</span>, <span class="number">2000</span>, <span class="number">5000</span>, <span class="number">100000</span>]</span><br><span class="line">  cats = pd.cut(train[<span class="string">'len'</span>], bins=bins,labels=<span class="keyword">None</span>)</span><br><span class="line">  print(pd.value_counts(cats))</span><br></pre></td></tr></table></figure><h2 id="2-加载停用词"><a class="markdownIt-Anchor" href="#2-加载停用词"></a> 2、加载停用词</h2><blockquote><p>文本处理的基本操作，这里可以直接将得到的停用词列表作为全局变量，否则对每条数据分词的时候都需要读取一遍。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop_words_list</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @ func 读取停用词列表</span></span><br><span class="line"><span class="string">    @ param path:停用词路径</span></span><br><span class="line"><span class="string">    停用词为每一行一个词存储</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    stop_words = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> open(path, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>).readlines()]</span><br><span class="line">    <span class="keyword">return</span> stop_words</span><br></pre></td></tr></table></figure><h2 id="3-分词去停用词"><a class="markdownIt-Anchor" href="#3-分词去停用词"></a> 3、分词去停用词</h2><blockquote><p>遍历所有数据，对每一条进行如下的分词去停用词操作。<code>df['senctence'].apply(lambda x: seg_sentence_all(x))</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">seg_sentence_all</span><span class="params">(sentence)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    对句子进行分词,去停用词</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    path = <span class="string">"data/stop_word_all.txt"</span></span><br><span class="line">    sentence_seged = jieba.cut(sentence.strip())</span><br><span class="line">    stop_words = stop_words_list(path)  <span class="comment"># 这里加载停用词的路径</span></span><br><span class="line">    cut_s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> sentence_seged:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> stop_words:</span><br><span class="line">            <span class="keyword">if</span> word != <span class="string">'\t'</span>:</span><br><span class="line">                str += word.strip()</span><br><span class="line">                str += <span class="string">' '</span></span><br><span class="line">    <span class="keyword">return</span> str.strip()</span><br></pre></td></tr></table></figure><h2 id="4-多类别共现词"><a class="markdownIt-Anchor" href="#4-多类别共现词"></a> 4、多类别共现词</h2><blockquote><p>在文本分类中，多个类别中频繁多次出现的词可能是停用词，也可能是标点符号，对于脱敏数据，我们无法查看到原始数据，无法确定停用词的时候可以使用如下方法来找出一部分贡献词作为停用词。</p><p>同样可以对所有分词后的数据做词的交集，更加精确粗暴。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_stop_word</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 为每个类构建词袋</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'bowlist.csv'</span>):</span><br><span class="line">        column = <span class="string">'word_seg'</span></span><br><span class="line">        train = pd.read_csv(path_train, encoding=<span class="string">'utf-8'</span>, sep=<span class="string">','</span>)</span><br><span class="line">        bowlist = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> np.arange(<span class="number">1</span>, <span class="number">20</span>, <span class="number">1</span>):</span><br><span class="line">            st = train[train[<span class="string">'class'</span>] == i]</span><br><span class="line">            cv = CountVectorizer(ngram_range=(<span class="number">1</span>, <span class="number">1</span>), lowercase=<span class="keyword">False</span>, max_df=<span class="number">0.9</span>, min_df=<span class="number">2</span>)</span><br><span class="line">            cv.fit(st[column].values)</span><br><span class="line">            vocal = cv.get_feature_names()</span><br><span class="line">            vst = set(vocal)</span><br><span class="line">            bowlist.extend(list(vst))</span><br><span class="line">        df = pd.DataFrame(bowlist)</span><br><span class="line">        df.to_csv(<span class="string">"bowlist.csv"</span>, index=<span class="keyword">False</span>)</span><br><span class="line">    <span class="comment"># 查看在多个类中出现的词</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        df = pd.read_csv(<span class="string">"bowlist.csv"</span>)</span><br><span class="line">        print(df)</span><br><span class="line">    dt = pd.DataFrame(df[<span class="string">'0'</span>].value_counts().reset_index())</span><br><span class="line">    dt.columns = [<span class="string">'word'</span>, <span class="string">'count'</span>]</span><br><span class="line">    <span class="comment"># 19个类别，如果在多个类别都出现则可作为停用词</span></span><br><span class="line">    dt[dt[<span class="string">'count'</span>] &gt; <span class="number">12</span>][<span class="string">'word'</span>].to_csv(<span class="string">'stop_word.csv'</span>, encoding=<span class="string">'utf-8'</span>, index=<span class="keyword">None</span>, header=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><h2 id="5-tf-idf向量化"><a class="markdownIt-Anchor" href="#5-tf-idf向量化"></a> 5、Tf-Idf向量化</h2><blockquote><p>TF-Idf传统文本处理的常用向量化操作 【他表示的是一个词的重要程度】。TF:表示词频，一个词在一篇文档中出现的频率，越大表示越重要，越具备代表性。但是它同时在很多文档中都出现了，那么他就不具备代表性。所有重要性与频率正比，与出现的文档数成反比，因此使用逆文档频率Idf表示降低频率的影响。Idf=lg(N/n)N:表示文档总数，n表示出现该词的文档数。TF=count/len(doc),count:词在文档doc出现次数,len(doc):表示文档词数。</p></blockquote><h4 id="51-sklearn中的tf-idf"><a class="markdownIt-Anchor" href="#51-sklearn中的tf-idf"></a> 5.1、sklearn中的tf-idf</h4><blockquote><p>重要的参数：</p><pre><code>- stop_words：可以传递一个停用词列表到这用于构建向量的时候去除停用词- ngram_range:也就是n-gram,N元词型合适的n-gram对结果有很大的帮助- lowercase：False,强转小写，默认True，但是对于中文会报错。</code></pre></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TfidfVec</span><span class="params">(dt_train, dt_test)</span>:</span></span><br><span class="line">    Tfidf = TfidfVectorizer(min_df=<span class="number">2</span>, max_df=<span class="number">0.9</span>, </span><br><span class="line">                            use_idf=<span class="number">1</span>, smooth_idf=<span class="number">1</span>, </span><br><span class="line">                            sublinear_tf=<span class="number">1</span>, ngram_range=(<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">                            stop_words=load_stopws(),lowercase=<span class="keyword">False</span>)</span><br><span class="line">    Tfidf.fit(dt_train[<span class="string">'article'</span>])</span><br><span class="line">    print(Tfidf.max_features)</span><br><span class="line">    train_word_vec = Tfidf.transform(dt_train[<span class="string">'article'</span>])</span><br><span class="line">    test_word_vec = Tfidf.transform(dt_test[<span class="string">'article'</span>])</span><br><span class="line">    <span class="keyword">return</span> train_word_vec, test_word_vec</span><br></pre></td></tr></table></figure><h4 id="52-gensim中的tf-idf"><a class="markdownIt-Anchor" href="#52-gensim中的tf-idf"></a> 5.2、Gensim中的tf-idf</h4><blockquote><p>Gensim是一个非常常用的NLP库，里面包含各种在官方基础上封装的库翻遍我们使用，包括常用的Word2Vec,LDA…</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Gensim_Tfidf</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 生成语料</span></span><br><span class="line">    sentences = [<span class="string">"我喜欢北京三点的太阳"</span>, <span class="string">"番茄炒西红柿是我的最爱"</span>, <span class="string">"我不喜欢今天雾霾的西安"</span>]</span><br><span class="line">    words = []</span><br><span class="line">    <span class="keyword">for</span> doc <span class="keyword">in</span> sentences:</span><br><span class="line">        words.append(list(jieba.cut(doc)))</span><br><span class="line">    print(words)</span><br><span class="line">    <span class="comment"># 生成词典</span></span><br><span class="line">    dic = corpora.Dictionary(words)</span><br><span class="line">    <span class="comment"># 生成语料库(每一个文档生成(词,出现的次数))的列表=即一个词频向量的稀疏表示</span></span><br><span class="line">    cps = [dic.doc2bow(text) <span class="keyword">for</span> text <span class="keyword">in</span> words]</span><br><span class="line">         <span class="comment"># 训练tfidf模型</span></span><br><span class="line">    tfidf = TfidfModel(corpus=cps)</span><br><span class="line">    <span class="comment"># 转换词频向量为tfidf向量</span></span><br><span class="line">    cps_tfidf = tfidf[cps]</span><br><span class="line">    <span class="keyword">return</span> cps_tfidf</span><br></pre></td></tr></table></figure><h2 id="6-lsa向量化"><a class="markdownIt-Anchor" href="#6-lsa向量化"></a> 6、LSA向量化</h2><blockquote><p>LSA,也可以叫做LSI,浅语义模型，是一种基于TF或者TF-IDF的降维手段，同时也是描述词语之间的语义关系的语义模型，它认为词和文档的共现矩阵当中存在着词之间语义关系，他们具有一定的相似性，构建词-文档的共现矩阵(通常是词频矩阵或TF-IDF权重矩阵)在进行SVD矩阵分解，在这个稠密的低维空间中。任意两个行向量即两个词的向量求相似度可以表示语义关系。</p></blockquote><blockquote><p>Gensim中已经集成LSA的模型可以直接调用。直接将cps或者cps_tfidf喂给LsiModel就可以得到降维后的数据，可用与分类，聚类。做相似度计算。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_lsi</span><span class="params">(cps, dic)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    LSI：浅语义分析</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">"\n=================LSI================="</span>)</span><br><span class="line">    lsi = LsiModel(corpus=cps, num_topics=<span class="number">2</span>, id2word=dic)</span><br><span class="line">    <span class="comment"># 输出训练得到的主题</span></span><br><span class="line">    tp = lsi.print_topics(num_topics=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查看每个文档的LSI主题分布</span></span><br><span class="line">    cps_lsi = lsi[cps]</span><br><span class="line">        <span class="keyword">return</span> cps_lsi</span><br></pre></td></tr></table></figure><h2 id="7-lda向量化"><a class="markdownIt-Anchor" href="#7-lda向量化"></a> 7、LDA向量化</h2><blockquote><p>LDA,又称主题模型，它认为在词和文档之间存在摸个隐变量 [主题] ，每个主题由多个词构成且每个词有一定的概率出现。而一篇文档可以由多个主题构成，且每个主题同样有一定的概率。那么如何得到一篇文档呢?我们知道这篇文档的主题分布，只需要以这个概率分布不断的去选择主题，再分别为每个主题按照主题-词的概率分布去选择词，迭代稳定后就可以的得到这篇文档。所以说我们可以将一篇用词表示的文档，用主题的概率分布来表示。表示之后的文档向量是一个稠密的低维向量，包含了某种语义联系，同时又进行了降维。</p></blockquote><blockquote><p>Gensim中同样进行了LDA的实现，同上，将cps或者cps_tfidf喂给LdaModel就可以得到降维后的数据。可用与分类，聚类，做相似度计算。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_lda</span><span class="params">(cps,dic)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    LDA:主题模型</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">"\n=================LDA================="</span>)</span><br><span class="line">    lda = LdaModel(corpus=cps, num_topics=<span class="number">2</span>, id2word=dic)</span><br><span class="line">    <span class="comment"># 输出五个主题</span></span><br><span class="line">    tp = lda.print_topics(num_topics=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出每个文档的主题</span></span><br><span class="line">    cps_lda = lda[cps]</span><br><span class="line">    <span class="keyword">return</span> cps_lda</span><br></pre></td></tr></table></figure><h2 id="8-word2vec词向量"><a class="markdownIt-Anchor" href="#8-word2vec词向量"></a> 8、Word2vec词向量</h2><blockquote><p>词向量表示是的是一个词的向量化表示，one-hot，tf,tf-idf都是一种词向量表示法，而word2vec也是一种词向量表示法，他通过训练一个词的上下文表示以一个词的概率这种深度学习分类模型来得到一组隐层权重来表示一个词，这个权重就是词向量它能够表示更多的语义信息和语序信息。</p><p>以下是Gensim包中的word2vec词向量训练，主要参数</p><ul><li><p>windows:上下文词的个数</p></li><li><p>size:需要训练的词向量的维度</p></li></ul><p>影响词向量的主要参数就是这两个，关于word2vec和其他参数，其他地方在做介绍。</p></blockquote><h4 id="81-gensimword2vec训练词向量"><a class="markdownIt-Anchor" href="#81-gensimword2vec训练词向量"></a> 8.1、Gensim.word2vec训练词向量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gensim.models.word2vec <span class="keyword">import</span> Word2Vec</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word2vec_train</span><span class="params">()</span>:</span></span><br><span class="line">      <span class="string">"""训练词向量"""</span></span><br><span class="line">    train = pd.read_csv(path_train, encoding=<span class="string">'utf-8'</span>, sep=<span class="string">','</span>)</span><br><span class="line">        <span class="comment"># train['word_seg']表示分词后的列</span></span><br><span class="line">    model = Word2Vec(train[<span class="string">'word_seg'</span>].values, window=<span class="number">5</span>, sg=<span class="number">0</span>, size=<span class="number">200</span>, min_count=<span class="number">1</span>,</span><br><span class="line">                     negative=<span class="number">3</span>, sample=<span class="number">0.001</span>, hs=<span class="number">1</span>, workers=<span class="number">4</span>,cbow_mean=<span class="number">1</span>)</span><br><span class="line">    model.wv.save_word2vec_format(<span class="string">"model.ve"</span>, binary=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><blockquote><p>可以通过修改以上两个参数，得到不同的词向量选择质量高的，或者如下同时训练多个词向量</p></blockquote><h4 id="82-同时训练多个窗口的词向量"><a class="markdownIt-Anchor" href="#82-同时训练多个窗口的词向量"></a> 8.2、同时训练多个窗口的词向量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]:</span><br><span class="line">    model = Word2Vec(data_all, window=i, sg=<span class="number">0</span>, size=<span class="number">100</span>, min_count=<span class="number">1</span>, negative=<span class="number">3</span>,</span><br><span class="line">                     sample=<span class="number">0.001</span>, hs=<span class="number">1</span>, workers=<span class="number">4</span>,cbow_mean=<span class="number">1</span>)</span><br><span class="line">    model.save(os.path.join(mc.data_path, <span class="string">'model.model'</span>))</span><br><span class="line">    model.wv.save_word2vec_format(os.path.join(mc.data_path, <span class="string">"model.ve"</span> + str(i)), binary=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h4 id="83-构建词向量字典"><a class="markdownIt-Anchor" href="#83-构建词向量字典"></a> 8.3、构建词向量字典</h4><blockquote><p>训练得到的词向量是一个文件，第一行有词的个数，第二行起每一行第一列是词，其他列对应的是词向量，以空格分割，要想把数据中的词对应上还需要建立词典。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_embeddings_dict</span><span class="params">()</span>:</span></span><br><span class="line">    embeddings_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">with</span> open(os.path.join(mc.data_path, <span class="string">'model.ve'</span>), encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            values = line.split(<span class="string">' '</span>)</span><br><span class="line">            coefs = np.asarray(values[<span class="number">1</span>:], dtype=<span class="string">'float64'</span>)</span><br><span class="line">            embeddings_dict[values[<span class="number">0</span>]] = coefs</span><br><span class="line">    <span class="keyword">return</span> embeddings_dict</span><br></pre></td></tr></table></figure><h4 id="84-词向量构建文档"><a class="markdownIt-Anchor" href="#84-词向量构建文档"></a> 8.4、词向量构建文档</h4><blockquote><p>一条数据寄一个文档，一个文档有10个词，每一个词是一个100维的词向量，那么这个文档就可以用word_count*100的矩阵表示。当然我们也可以通过把每一个词的词向量加和求平均值，这样一篇文档就是一个100维的向量了。</p></blockquote><ul><li>文档向量=词向量加和平均</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word_embedding_vector</span><span class="params">(s, embeddings_dict)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    词嵌入构建句子向量</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    svt = np.zeros(<span class="number">100</span>, dtype=<span class="string">'float64'</span>)</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> s.split(<span class="string">' '</span>):  <span class="comment"># ==x.split(' ')</span></span><br><span class="line">        word_v = embeddings_dict.get(word)</span><br><span class="line">        <span class="keyword">if</span> word_v <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            svt += word_v</span><br><span class="line">    <span class="keyword">return</span> svt</span><br></pre></td></tr></table></figure><ul><li>文档向量=文档中所有词的词向量组成的矩阵</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">EMBEDDING_DIM = <span class="number">300</span></span><br><span class="line">nb_words = min(MAX_NB_WORDS,len(word_index))</span><br><span class="line">word_embedding_matrix = np.zeros((nb_words + <span class="number">1</span>, EMBEDDING_DIM))</span><br><span class="line"><span class="keyword">for</span> word, i <span class="keyword">in</span> word_index.items():</span><br><span class="line">    <span class="keyword">if</span> i &gt; MAX_NB_WORDS:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    embedding_vector = embeddings_index.get(str(word))</span><br><span class="line">    <span class="keyword">if</span> embedding_vector <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        word_embedding_matrix[i] = embedding_vector</span><br></pre></td></tr></table></figure><blockquote><p>对每一个文档获取如上的矩阵，那么着呢哥哥训练集，就是一个三维额矩阵。Text-cnn采用的就是这种结构。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这里主要是记录文本相关的比赛中积累的代码片段和操作，量变产生质变，每一次探索和积累都是一小步的成长，不求走的多快，多远，我一直在行走，在努力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文本数据的处理主要是&lt;code&gt;分词&lt;/code&gt;，&lt;code
      
    
    </summary>
    
      <category term="Match" scheme="http://nextnight.github.io/categories/Match/"/>
    
      <category term="NLP" scheme="http://nextnight.github.io/categories/Match/NLP/"/>
    
    
      <category term="文本处理" scheme="http://nextnight.github.io/tags/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SNA-社交网络分析</title>
    <link href="http://nextnight.github.io/2018/09/29/SNA-%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/"/>
    <id>http://nextnight.github.io/2018/09/29/SNA-社交网络分析/</id>
    <published>2018-09-29T07:32:02.000Z</published>
    <updated>2018-09-30T05:39:36.796Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="class1" scheme="http://nextnight.github.io/categories/class1/"/>
    
      <category term="class2" scheme="http://nextnight.github.io/categories/class1/class2/"/>
    
    
      <category term="tg1" scheme="http://nextnight.github.io/tags/tg1/"/>
    
      <category term="tag2" scheme="http://nextnight.github.io/tags/tag2/"/>
    
  </entry>
  
  <entry>
    <title>ML-DTree决策树</title>
    <link href="http://nextnight.github.io/2018/09/29/ML-DTree%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    <id>http://nextnight.github.io/2018/09/29/ML-DTree决策树/</id>
    <published>2018-09-29T07:16:44.000Z</published>
    <updated>2018-09-29T07:18:02.425Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="ML" scheme="http://nextnight.github.io/categories/ML/"/>
    
    
      <category term="决策树" scheme="http://nextnight.github.io/tags/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>ML-Svm支持向量机</title>
    <link href="http://nextnight.github.io/2018/09/29/ML-Svm%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/"/>
    <id>http://nextnight.github.io/2018/09/29/ML-Svm支持向量机/</id>
    <published>2018-09-29T07:15:10.000Z</published>
    <updated>2018-09-29T07:17:46.640Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="ML" scheme="http://nextnight.github.io/categories/ML/"/>
    
    
      <category term="支持向量机" scheme="http://nextnight.github.io/tags/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/"/>
    
      <category term="svm" scheme="http://nextnight.github.io/tags/svm/"/>
    
  </entry>
  
  <entry>
    <title>ML-Logistic回归</title>
    <link href="http://nextnight.github.io/2018/09/29/ML-Logistic%E5%9B%9E%E5%BD%92/"/>
    <id>http://nextnight.github.io/2018/09/29/ML-Logistic回归/</id>
    <published>2018-09-29T07:13:53.000Z</published>
    <updated>2018-10-10T03:08:37.637Z</updated>
    
    <content type="html"><![CDATA[<script>MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)'],['\\','\\']]}});</script><h1 id="logist"><a class="markdownIt-Anchor" href="#logist"></a> Logist</h1><blockquote><p>① 什么是逻辑回归？</p></blockquote><p>逻辑回归是一种分类算法，它衍生于线性回归，我们都知道线性回归使用一条线去拟合数据，通常情况x和y没有界限。而我们可以通过取阈值来将这条线划分为两个部分，比如说&gt;0.5这部分设为1，小于0.5为0，这样就将数据划分为了两类。但是线性回归的数据通常不稳定，我们需要不断地去调整这个阈值才能将其分为两个想要的类别，因此逻辑回归诞生了。</p><p>逻辑回归在线性回归的基础上加上了一个阶跃函数，这个阶跃函数将无限区间的数值映射到了[【0,1】]这个区间之内。从阶跃函数<code>sigmod</code>的图像可以看出，当x到达0.5的时候，函数值y会发生突变。[同时他也表示是的函数值y为1的概率]P(y=1|x).</p><blockquote><p>② 为什么函数值y表示的是类别为1的概率？</p></blockquote><p>1、假设有一个线性函数：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mstyle mathcolor="DarkGreen"><mi>z</mi><mo>=</mo><mi>w</mi><mi>x</mi><mo>+</mo><mi>b</mi></mstyle></mrow></mrow><annotation encoding="application/x-tex">{\color{DarkGreen} z=wx+b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.04398em;color:DarkGreen;">z</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:DarkGreen;">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord mathit" style="margin-right:0.02691em;color:DarkGreen;">w</span><span class="mord mathit" style="color:DarkGreen;">x</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin" style="color:DarkGreen;">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit" style="color:DarkGreen;">b</span></span></span></span></span> ,sigmod函数：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mstyle mathcolor="DarkGreen"><mi>y</mi><mo>=</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>z</mi></mrow></msup></mrow></mfrac></mstyle></mrow></mrow><annotation encoding="application/x-tex">{\color{DarkGreen} y = \frac{1}{1+e^{-z}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;color:DarkGreen;">y</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:DarkGreen;">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord" style="color:DarkGreen;"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;">1</span><span class="mbin mtight" style="color:DarkGreen;">+</span><span class="mord mtight" style="color:DarkGreen;"><span class="mord mathit mtight" style="color:DarkGreen;">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7026642857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;">−</span><span class="mord mathit mtight" style="margin-right:0.04398em;color:DarkGreen;">z</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="color:DarkGreen;height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span> ,</p><p>2、假设p(y=1|x):表示y=1的概率，那么1-p就表示y=0的概率，</p><p>3、则对数几率：$ {\color{DarkGreen} ln(\frac{p}{1-p})}$ ,我们用这个对数几率ods去拟合线性函数 $ {\color{DarkGreen} ln(\frac{p}{1-p})=z}$ 可推导如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⇒</mo><mrow><mstyle mathcolor="DarkGreen"><mi>l</mi><mi>n</mi><mo>(</mo><mfrac><mrow><mi>p</mi></mrow><mrow><mn>1</mn><mo>−</mo><mi>p</mi></mrow></mfrac><mo>)</mo><mo>=</mo><mi>z</mi></mstyle></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⇒</mo><mrow><mstyle mathcolor="DarkGreen"><msup><mi>e</mi><mi>z</mi></msup><mo>=</mo><mfrac><mrow><mi>p</mi></mrow><mrow><mn>1</mn><mo>−</mo><mi>p</mi></mrow></mfrac></mstyle></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⇒</mo><mrow><mstyle mathcolor="DarkGreen"><msup><mi>e</mi><mrow><mo>−</mo><mi>z</mi></mrow></msup><mo>=</mo><mfrac><mrow><mn>1</mn><mo>−</mo><mi>p</mi></mrow><mrow><mi>p</mi></mrow></mfrac></mstyle></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⇒</mo><mrow><mstyle mathcolor="DarkGreen"><msup><mi>e</mi><mrow><mo>−</mo><mi>z</mi></mrow></msup><mo>=</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mi>p</mi></mrow></mfrac><mo>−</mo><mn>1</mn></mstyle></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⇒</mo><mrow><mstyle mathcolor="DarkGreen"><msup><mi>e</mi><mrow><mo>−</mo><mi>z</mi></mrow></msup><mo>+</mo><mn>1</mn><mo>=</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mi>p</mi></mrow></mfrac></mstyle></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>⇒</mo><mrow><mstyle mathcolor="DarkGreen"><mi>p</mi><mo>=</mo><mfrac><mrow><mn>1</mn></mrow><mrow><msup><mi>e</mi><mrow><mo>−</mo><mi>z</mi></mrow></msup><mo>+</mo><mn>1</mn></mrow></mfrac></mstyle></mrow></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{aligned}&amp;\Rightarrow {\color{DarkGreen} ln(\frac{p}{1-p})=z}\\&amp;\Rightarrow {\color{DarkGreen} e^{z}=\frac{p}{1-p}}\\&amp;\Rightarrow {\color{DarkGreen} e^{-z}=\frac{1-p}{p}}\\&amp;\Rightarrow {\color{DarkGreen} e^{-z}=\frac{1}{p}-1}\\&amp;\Rightarrow {\color{DarkGreen} e^{-z}+1=\frac{1}{p}}\\&amp;\Rightarrow {\color{DarkGreen} p=\frac{1}{e^{-z}+1}}\\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:7.486205em;"></span><span class="strut bottom" style="height:14.47241em;vertical-align:-6.986205em;"></span><span class="base"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:7.486205em;"><span style="top:-9.700085000000001em;"><span class="pstrut" style="height:3.32144em;"></span><span class="mord"></span></span><span style="top:-7.412084999999999em;"><span class="pstrut" style="height:3.32144em;"></span><span class="mord"></span></span><span style="top:-4.9102049999999995em;"><span class="pstrut" style="height:3.32144em;"></span><span class="mord"></span></span><span style="top:-2.4083250000000005em;"><span class="pstrut" style="height:3.32144em;"></span><span class="mord"></span></span><span style="top:0.09355500000000005em;"><span class="pstrut" style="height:3.32144em;"></span><span class="mord"></span></span><span style="top:2.595435em;"><span class="pstrut" style="height:3.32144em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.986205em;"></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:7.486205em;"><span style="top:-9.700085000000001em;"><span class="pstrut" style="height:3.32144em;"></span><span class="mord"><span class="mord"></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.01968em;color:DarkGreen;">l</span><span class="mord mathit" style="color:DarkGreen;">n</span><span class="mopen" style="color:DarkGreen;">(</span><span class="mord" style="color:DarkGreen;"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="color:DarkGreen;"><span class="mord" style="color:DarkGreen;">1</span><span class="mord rule" style="color:DarkGreen;margin-right:0.2222222222222222em;"></span><span class="mbin" style="color:DarkGreen;">−</span><span class="mord rule" style="color:DarkGreen;margin-right:0.2222222222222222em;"></span><span class="mord mathit" style="color:DarkGreen;">p</span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="color:DarkGreen;height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.6770000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="color:DarkGreen;"><span class="mord mathit" style="color:DarkGreen;">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose" style="color:DarkGreen;">)</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:DarkGreen;">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord mathit" style="margin-right:0.04398em;color:DarkGreen;">z</span></span></span></span><span style="top:-7.412084999999999em;"><span class="pstrut" style="height:3.32144em;"></span><span class="mord"><span class="mord"></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord" style="color:DarkGreen;"><span class="mord mathit" style="color:DarkGreen;">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;"><span class="mord mathit mtight" style="margin-right:0.04398em;color:DarkGreen;">z</span></span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:DarkGreen;">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord" style="color:DarkGreen;"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="color:DarkGreen;"><span class="mord" style="color:DarkGreen;">1</span><span class="mord rule" style="color:DarkGreen;margin-right:0.2222222222222222em;"></span><span class="mbin" style="color:DarkGreen;">−</span><span class="mord rule" style="color:DarkGreen;margin-right:0.2222222222222222em;"></span><span class="mord mathit" style="color:DarkGreen;">p</span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="color:DarkGreen;height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.6770000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="color:DarkGreen;"><span class="mord mathit" style="color:DarkGreen;">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span style="top:-4.9102049999999995em;"><span class="pstrut" style="height:3.32144em;"></span><span class="mord"><span class="mord"></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord" style="color:DarkGreen;"><span class="mord mathit" style="color:DarkGreen;">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;">−</span><span class="mord mathit mtight" style="margin-right:0.04398em;color:DarkGreen;">z</span></span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:DarkGreen;">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord" style="color:DarkGreen;"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214400000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="color:DarkGreen;"><span class="mord mathit" style="color:DarkGreen;">p</span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="color:DarkGreen;height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.6770000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="color:DarkGreen;"><span class="mord" style="color:DarkGreen;">1</span><span class="mord rule" style="color:DarkGreen;margin-right:0.2222222222222222em;"></span><span class="mbin" style="color:DarkGreen;">−</span><span class="mord rule" style="color:DarkGreen;margin-right:0.2222222222222222em;"></span><span class="mord mathit" style="color:DarkGreen;">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span style="top:-2.4083250000000005em;"><span class="pstrut" style="height:3.32144em;"></span><span class="mord"><span class="mord"></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord" style="color:DarkGreen;"><span class="mord mathit" style="color:DarkGreen;">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;">−</span><span class="mord mathit mtight" style="margin-right:0.04398em;color:DarkGreen;">z</span></span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:DarkGreen;">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord" style="color:DarkGreen;"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="color:DarkGreen;"><span class="mord mathit" style="color:DarkGreen;">p</span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="color:DarkGreen;height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="color:DarkGreen;"><span class="mord" style="color:DarkGreen;">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin" style="color:DarkGreen;">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord" style="color:DarkGreen;">1</span></span></span></span><span style="top:0.09355500000000005em;"><span class="pstrut" style="height:3.32144em;"></span><span class="mord"><span class="mord"></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord" style="color:DarkGreen;"><span class="mord mathit" style="color:DarkGreen;">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.821331em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;">−</span><span class="mord mathit mtight" style="margin-right:0.04398em;color:DarkGreen;">z</span></span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin" style="color:DarkGreen;">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord" style="color:DarkGreen;">1</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:DarkGreen;">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord" style="color:DarkGreen;"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="color:DarkGreen;"><span class="mord mathit" style="color:DarkGreen;">p</span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="color:DarkGreen;height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="color:DarkGreen;"><span class="mord" style="color:DarkGreen;">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span style="top:2.595435em;"><span class="pstrut" style="height:3.32144em;"></span><span class="mord"><span class="mord"></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathit" style="color:DarkGreen;">p</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:DarkGreen;">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord" style="color:DarkGreen;"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="color:DarkGreen;"><span class="mord" style="color:DarkGreen;"><span class="mord mathit" style="color:DarkGreen;">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.697331em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;">−</span><span class="mord mathit mtight" style="margin-right:0.04398em;color:DarkGreen;">z</span></span></span></span></span></span></span></span></span><span class="mord rule" style="color:DarkGreen;margin-right:0.2222222222222222em;"></span><span class="mbin" style="color:DarkGreen;">+</span><span class="mord rule" style="color:DarkGreen;margin-right:0.2222222222222222em;"></span><span class="mord" style="color:DarkGreen;">1</span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="color:DarkGreen;height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="color:DarkGreen;"><span class="mord" style="color:DarkGreen;">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.986205em;"></span></span></span></span></span></span></span></span></span></span></p><p>如上可得:<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mstyle mathcolor="DarkGreen"><mi>y</mi><mo>=</mo><mi>p</mi></mstyle></mrow></mrow><annotation encoding="application/x-tex">{\color{DarkGreen} y=p}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.43056em;"></span><span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;color:DarkGreen;">y</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:DarkGreen;">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord mathit" style="color:DarkGreen;">p</span></span></span></span></span> 则说明函数值y确实表示是概率值。</p><blockquote><p>③  逻辑回归的损失函数是什么？</p></blockquote><p>1、logist的模型函数：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mstyle mathcolor="DarkGreen"><mi>h</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>=</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>z</mi></mrow></msup></mrow></mfrac><mo separator="true">,</mo><mo>(</mo><mi>z</mi><mo>=</mo><mi>w</mi><mi>x</mi><mo>+</mo><mi>b</mi><mo>)</mo></mstyle></mrow></mrow><annotation encoding="application/x-tex">{\color{DarkGreen} h(z)=\frac{1}{1+e^{-z}},(z=wx+b)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="color:DarkGreen;">h</span><span class="mopen" style="color:DarkGreen;">(</span><span class="mord mathit" style="margin-right:0.04398em;color:DarkGreen;">z</span><span class="mclose" style="color:DarkGreen;">)</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:DarkGreen;">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord" style="color:DarkGreen;"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;">1</span><span class="mbin mtight" style="color:DarkGreen;">+</span><span class="mord mtight" style="color:DarkGreen;"><span class="mord mathit mtight" style="color:DarkGreen;">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7026642857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;">−</span><span class="mord mathit mtight" style="margin-right:0.04398em;color:DarkGreen;">z</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="color:DarkGreen;height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct" style="color:DarkGreen;">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mopen" style="color:DarkGreen;">(</span><span class="mord mathit" style="margin-right:0.04398em;color:DarkGreen;">z</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:DarkGreen;">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord mathit" style="margin-right:0.02691em;color:DarkGreen;">w</span><span class="mord mathit" style="color:DarkGreen;">x</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin" style="color:DarkGreen;">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit" style="color:DarkGreen;">b</span><span class="mclose" style="color:DarkGreen;">)</span></span></span></span></span></p><p>2、假设使用最小二乘法OLS:<code>cross function</code>😒 {\color{DarkGreen} J(w) = \dfrac{1}{2}\sum_{i}<sup>N(h(z)</sup>{(i)}) - y<sup>{(i)})</sup>2}$ 。得到的是一个非凸函数，有很多的局部极值，不利于解的最优值。</p><p>3、极大似然估计MLE来描述:既然 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>(</mo><mi>z</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">h(z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base"><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span> 描述的是类别为1的概率,</p><ul><li>类别为1的概率：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mstyle mathcolor="DarkGreen"><mi>p</mi><mo>(</mo><mi>y</mi><mo>=</mo><mn>1</mn><mi mathvariant="normal">∣</mi><mi>x</mi><mo separator="true">,</mo><mi>w</mi><mo>)</mo><mo>=</mo><mi>h</mi><mo>(</mo><mi>z</mi><mo>)</mo></mstyle></mrow></mrow><annotation encoding="application/x-tex">{\color{DarkGreen}p(y=1|x,w)= h(z)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="color:DarkGreen;">p</span><span class="mopen" style="color:DarkGreen;">(</span><span class="mord mathit" style="margin-right:0.03588em;color:DarkGreen;">y</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:DarkGreen;">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord" style="color:DarkGreen;">1</span><span class="mord" style="color:DarkGreen;">∣</span><span class="mord mathit" style="color:DarkGreen;">x</span><span class="mpunct" style="color:DarkGreen;">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.02691em;color:DarkGreen;">w</span><span class="mclose" style="color:DarkGreen;">)</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:DarkGreen;">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord mathit" style="color:DarkGreen;">h</span><span class="mopen" style="color:DarkGreen;">(</span><span class="mord mathit" style="margin-right:0.04398em;color:DarkGreen;">z</span><span class="mclose" style="color:DarkGreen;">)</span></span></span></span></span></li><li>类别为0的概率：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mstyle mathcolor="DarkGreen"><mi>p</mi><mo>(</mo><mi>y</mi><mo>=</mo><mn>0</mn><mi mathvariant="normal">∣</mi><mi>x</mi><mo separator="true">,</mo><mi>w</mi><mo>)</mo><mo>=</mo><mn>1</mn><mo>−</mo><mi>h</mi><mo>(</mo><mi>z</mi><mo>)</mo></mstyle></mrow></mrow><annotation encoding="application/x-tex">{\color{DarkGreen}p(y=0|x,w)=1-h(z) }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="color:DarkGreen;">p</span><span class="mopen" style="color:DarkGreen;">(</span><span class="mord mathit" style="margin-right:0.03588em;color:DarkGreen;">y</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:DarkGreen;">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord" style="color:DarkGreen;">0</span><span class="mord" style="color:DarkGreen;">∣</span><span class="mord mathit" style="color:DarkGreen;">x</span><span class="mpunct" style="color:DarkGreen;">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.02691em;color:DarkGreen;">w</span><span class="mclose" style="color:DarkGreen;">)</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:DarkGreen;">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord" style="color:DarkGreen;">1</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin" style="color:DarkGreen;">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit" style="color:DarkGreen;">h</span><span class="mopen" style="color:DarkGreen;">(</span><span class="mord mathit" style="margin-right:0.04398em;color:DarkGreen;">z</span><span class="mclose" style="color:DarkGreen;">)</span></span></span></span></span></li><li>将以上两式通用式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mstyle mathcolor="DarkGreen"><mi>p</mi><mo>(</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo separator="true">,</mo><mi>w</mi><mo>)</mo><mo>=</mo><mi>h</mi><mo>(</mo><mi>z</mi><msup><mo>)</mo><msup><mi>y</mi><mi>i</mi></msup></msup><mi mathvariant="normal">.</mi><mo>(</mo><mn>1</mn><mo>−</mo><mi>h</mi><mo>(</mo><mi>z</mi><msup><mo>)</mo><mrow><mn>1</mn><mo>−</mo><msup><mi>y</mi><mi>i</mi></msup></mrow></msup><mo>)</mo></mstyle></mrow></mrow><annotation encoding="application/x-tex">{\color{DarkGreen}p(y|x,w)=h(z)^{y^i}.(1-h(z)^{1-y^i})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.9944599999999999em;"></span><span class="strut bottom" style="height:1.24446em;vertical-align:-0.25em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="color:DarkGreen;">p</span><span class="mopen" style="color:DarkGreen;">(</span><span class="mord mathit" style="margin-right:0.03588em;color:DarkGreen;">y</span><span class="mord" style="color:DarkGreen;">∣</span><span class="mord mathit" style="color:DarkGreen;">x</span><span class="mpunct" style="color:DarkGreen;">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.02691em;color:DarkGreen;">w</span><span class="mclose" style="color:DarkGreen;">)</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel" style="color:DarkGreen;">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord mathit" style="color:DarkGreen;">h</span><span class="mopen" style="color:DarkGreen;">(</span><span class="mord mathit" style="margin-right:0.04398em;color:DarkGreen;">z</span><span class="mclose" style="color:DarkGreen;"><span class="mclose" style="color:DarkGreen;">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9944599999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;"><span class="mord mathit mtight" style="margin-right:0.03588em;color:DarkGreen;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9020857142857143em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight" style="color:DarkGreen;"><span class="mord mathit mtight" style="color:DarkGreen;">i</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord" style="color:DarkGreen;">.</span><span class="mopen" style="color:DarkGreen;">(</span><span class="mord" style="color:DarkGreen;">1</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin" style="color:DarkGreen;">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit" style="color:DarkGreen;">h</span><span class="mopen" style="color:DarkGreen;">(</span><span class="mord mathit" style="margin-right:0.04398em;color:DarkGreen;">z</span><span class="mclose" style="color:DarkGreen;"><span class="mclose" style="color:DarkGreen;">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9944599999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;"><span class="mord mtight" style="color:DarkGreen;">1</span><span class="mbin mtight" style="color:DarkGreen;">−</span><span class="mord mtight" style="color:DarkGreen;"><span class="mord mathit mtight" style="margin-right:0.03588em;color:DarkGreen;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9020857142857143em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight" style="color:DarkGreen;"><span class="mord mathit mtight" style="color:DarkGreen;">i</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose" style="color:DarkGreen;">)</span></span></span></span></span></li><li>MLE:</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>L</mi><mo>(</mo><mi>w</mi><mo>)</mo><mi mathvariant="normal">&amp;</mi><mo>=</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>p</mi><mo>(</mo><msup><mi>y</mi><mi>i</mi></msup><mi mathvariant="normal">∣</mi><msup><mi>x</mi><mi>i</mi></msup><mo separator="true">,</mo><mi>w</mi><mo>)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi mathvariant="normal">&amp;</mi><mo>=</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>h</mi><mo>(</mo><mi>z</mi><msup><mo>)</mo><msup><mi>y</mi><mi>i</mi></msup></msup><mi mathvariant="normal">.</mi><mo>(</mo><mn>1</mn><mo>−</mo><mi>h</mi><mo>(</mo><mi>z</mi><mo>)</mo><msup><mo>)</mo><mrow><mn>1</mn><mo>−</mo><msup><mi>y</mi><mi>i</mi></msup></mrow></msup></mrow></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{aligned}L(w)\&amp;=\prod_{i=1}^n{p(y^i|x^i,w)}\\\&amp;=\prod_{i=1}^n{h(z)^{y^i}.(1-h(z))^{1-y^i}}\\\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:3.4790660000000004em;"></span><span class="strut bottom" style="height:6.458132000000001em;vertical-align:-2.9790660000000004em;"></span><span class="base"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.4790660000000004em;"><span style="top:-5.479066em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord mathit">L</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mord">&amp;</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathit">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mclose">)</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord">&amp;</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04446em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9020857142857143em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathit mtight">i</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord">.</span><span class="mopen">(</span><span class="mord">1</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04446em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9020857142857143em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathit mtight">i</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.9790660000000004em;"></span></span></span></span></span></span></span></span></span></span></p><ul><li>简化MLE：取对数似然,<code>概率积-&gt;概率和</code>方便计算。</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>L</mi><mo>(</mo><mi>w</mi><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>p</mi><mo>(</mo><msup><mi>y</mi><mi>i</mi></msup><mi mathvariant="normal">∣</mi><msup><mi>x</mi><mi>i</mi></msup><mo separator="true">,</mo><mi>w</mi><mo>)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mi>h</mi><mo>(</mo><mi>z</mi><msup><mo>)</mo><msup><mi>y</mi><mi>i</mi></msup></msup><mi mathvariant="normal">.</mi><mo>(</mo><mn>1</mn><mo>−</mo><mi>h</mi><mo>(</mo><mi>z</mi><mo>)</mo><msup><mo>)</mo><mrow><mn>1</mn><mo>−</mo><msup><mi>y</mi><mi>i</mi></msup></mrow></msup></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>l</mi><mi>n</mi><mo>(</mo><mi>L</mi><mo>(</mo><mi>w</mi><mo>)</mo><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo>(</mo><msup><mi>y</mi><mi>i</mi></msup><mi>l</mi><mi>n</mi><mo>(</mo><mi>h</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>+</mo><mo>(</mo><mn>1</mn><mo>−</mo><msup><mi>y</mi><mi>i</mi></msup><mo>)</mo><mi>l</mi><mi>n</mi><mo>(</mo><mn>1</mn><mo>−</mo><mi>h</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>)</mo><mo>)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{aligned}L(w)&amp;=\prod_{i=1}^n{p(y^i|x^i,w)}\\&amp;=\prod_{i=1}^n{h(z)^{y^i}.(1-h(z))^{1-y^i}}\\ln(L(w))&amp;=\sum_{i=1}^{n}(y^iln(h(z)+(1-y^i)ln(1-h(z)))\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:5.093599000000001em;"></span><span class="strut bottom" style="height:9.687198000000002em;vertical-align:-4.593599000000001em;"></span><span class="base"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.093599000000001em;"><span style="top:-7.093599000000001em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord mathit">L</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mclose">)</span></span></span><span style="top:-3.8645330000000007em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"></span></span><span style="top:-0.6354669999999991em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord mathit">L</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.593599000000001em;"></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.093599000000001em;"><span style="top:-7.093599000000001em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathit">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mclose">)</span></span></span></span><span style="top:-3.8645330000000007em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04446em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9020857142857143em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathit mtight">i</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord">.</span><span class="mopen">(</span><span class="mord">1</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04446em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9020857142857143em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathit mtight">i</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-0.6354669999999991em;"><span class="pstrut" style="height:3.6513970000000002em;"></span><span class="mord"><span class="mord"></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span></span></span></span></span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord">1</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.593599000000001em;"></span></span></span></span></span></span></span></span></span></span></p><ul><li>负对数似然：给以上的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>n</mi><mo>(</mo><mi>L</mi><mo>(</mo><mi>w</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">ln(L(w))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord mathit">L</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span> 取负，得到负对数似然，对数似然有极大值，负对数似然有极小值，损失函数即是找到一个关于误差最小的函数则Logist的损失函数为：</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>J</mi><mo>(</mo><mi>w</mi><mo>)</mo><mo>=</mo><mo>−</mo><mi>l</mi><mi>n</mi><mo>(</mo><mi>L</mi><mo>(</mo><mi>w</mi><mo>)</mo><mo>)</mo><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo>(</mo><msup><mi>y</mi><mi>i</mi></msup><mi>l</mi><mi>n</mi><mo>(</mo><mi>h</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>+</mo><mo>(</mo><mn>1</mn><mo>−</mo><msup><mi>y</mi><mi>i</mi></msup><mo>)</mo><mi>l</mi><mi>n</mi><mo>(</mo><mn>1</mn><mo>−</mo><mi>h</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">J(w) = -ln(L(w))=- \sum_{i=1}^{n}(y^iln(h(z)+(1-y^i)ln(1-h(z)))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.6513970000000002em;"></span><span class="strut bottom" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord mathit">L</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord">−</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span></span></span></span></span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight">i</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord">1</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><blockquote><p>④ 逻辑回归损失函数的图像？</p></blockquote><p>1、分别对损失函数y取值0,1得到如下函数：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>J</mi><mo>(</mo><mi>h</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo separator="true">,</mo><mi>y</mi><mo separator="true">;</mo><mi>w</mi><mo>)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>l</mi><mi>n</mi><mo>(</mo><mi>h</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>i</mi><mi>f</mi><mspace width="1em"></mspace><mi>y</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>l</mi><mi>n</mi><mo>(</mo><mn>1</mn><mo>−</mo><mi>h</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>i</mi><mi>f</mi><mspace width="1em"></mspace><mi>y</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">J(h(z),y;w)=\begin{cases} -ln(h(z)) &amp; if\quad y=1 \\ -ln(1-h(z)) &amp; if\quad y=0 \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.75em;"></span><span class="strut bottom" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mpunct">;</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord">1</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathit">i</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mspace quad"></span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathit">i</span><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mspace quad"></span><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>2、得到图像如下：<br><img src="media/15390610499477/logist.png" alt="logist"></p><blockquote><p>⑤ 逻辑回归如何求解？</p></blockquote><p>1、逻辑回归求解的是最优的参数集，即使得误差最小的参数集合。<br>2、逻辑回归使用梯度下降求解最优参数：</p><blockquote><p>梯度的负方向是损失函数下降最快的方向，我们的目标是最小化损失函数，所以要沿梯度的方向不断地去修改参数W的值使得J(w)损失函数值不断减小，到达最低点，此时的参数w就是最优的。<br>为什么梯度负方向是损失函数下降最快的方向？<br>因为梯度方向是函数值增长最快的方向。方向导数：就是多元函数关于某一个维度的偏导数，而关于某一点的方向导数有无穷个，表示函数在各个方向上的增长速度。那么如何描述函数在这个点上增长最快的方向呢？？引入[ - 梯度-  ] 的概念,梯度是函数在这个点上的各个方向导数的矢量和，即是各个偏导数构成的向量。</p></blockquote><blockquote><p>⑥ SGD梯度下降如何求解？</p></blockquote><p>1、损失函数求偏导即梯度：</p>\begin{aligned}\bigtriangledown =\frac {\partial J(w)}{\partial w_j}&= {-ln(L(w))}' \\&=-\sum_ {i=1}^{n}({yln(h(z))+(1-y)ln(1-h(z)))}' \\&=-\sum_ {i=1}^{n} y\frac{1}{h(z)}{h(z)}'+(1-y)\frac{1}{1-h(z)}{(1-h(z))}'         \\对h(z)求偏导：\\{h(z)}' &={ \frac{1}{1+e^{-wx}}}'\\&= {(1+e^{-wx})^{-1}}'\\&= (1+e^{-wx})^{-2} {(1+e^{-wx})}'\\&= (1+e^{-wx})^{-2}e^{-wx}{(-wx)}'\\&= -  (1+e^{-wx})^{-2}e^{-wx}{(wx)}'\\&= -\frac{e^{-wx}}{(1+e^{-wx})^2} {(wx)}'\\&= - \frac{1}{(1+e^{-wx})}\frac{e^{-wx}}{(1+e^{-wx})} {(wx)}'\\&= - \frac{1}{(1+e^{-wx})}(1- \frac{1}{(1+e^{-wx})}){(wx)}'\\&= -h(z)(1-h(z)){(wx)}'\\对1-h(z)求偏导：\\(1-{h(z)})' &=-{h(z)})'\\&=h(z)(1-h(z)){(wx)}'\\\\\bigtriangledown =\frac {\partial J(w)}{\partial w_j}&= {-ln(L(w))}' \\&=-\sum_ {i=1}^{n} y\frac{1}{h(z)}(-h(z)(1-h(z)){(wx)}')+(1-y)\frac{1}{1-h(z)}(h(z)(1-h(z)){(wx)}')\\&=\sum_ {i=1}^{n} y\frac{1}{h(z)}(h(z)(1-h(z)){(wx)}')-(1-y)\frac{1}{1-h(z)}(h(z)(1-h(z)){(wx)}')\\&=\sum_ {i=1}^{n}[y(1-h(z))-(1-y)h(z)]{(wx)}'\\&=\sum_ {i=1}^{n}[y-yh(z)-h(z)+yh(z)]{(wx)}'\\&=\sum_ {i=1}^{n}(y-h(z)){(wx)}'\\&=\sum_ {i=1}^{n}(y-h(z))x_j\\&=(y-h(z))x_j\\\bigtriangledown =\frac {\partial J(w)}{\partial w_j}&=\sum_ {i=1}^{n}(y^i-h(z)^i){x_j}^i\\其中i表示第i条数据，j表示第j维\\\end{aligned}<p>2、上面得到了关于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">W_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"></span></span></span></span></span></span></span></span> 的梯度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>▽</mo></mrow><annotation encoding="application/x-tex">\bigtriangledown</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="base"><span class="mord">▽</span></span></span></span> ,迭代更新W,W的更新公式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>j</mi></msub><mo>=</mo><msub><mi>W</mi><mi>j</mi></msub><mo>+</mo><mi>α</mi><mo>▽</mo></mrow><annotation encoding="application/x-tex">W_j=W_j+\alpha\bigtriangledown</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathit mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit" style="margin-right:0.0037em;">α</span><span class="mord">▽</span></span></span></span> α表示学习率，<br>3、批量梯度下降：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 数据有：i行，<span class="keyword">j</span>列，所有要更新<span class="keyword">j</span>个<span class="keyword">w</span>,每个<span class="keyword">w</span>可以选择用多少条数据取更新它，默认是全量数据。即批量更新。</span><br><span class="line"><span class="keyword">for</span> data_i in data_num<span class="variable">s:</span></span><br><span class="line">    <span class="keyword">wi</span> = <span class="keyword">wi</span> + α*梯度</span><br></pre></td></tr></table></figure><p>简单来说：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>w</mi></mrow><mo stretchy="true">→</mo></mover><mo>=</mo><mo>(</mo><mover accent="true"><mrow><mi>y</mi></mrow><mo stretchy="true">→</mo></mover><mo>−</mo><mover accent="true"><mrow><mi>h</mi><mo>(</mo><mi>z</mi><mo>)</mo></mrow><mo stretchy="true">→</mo></mover><mo>)</mo><mover accent="true"><mrow><mi>x</mi></mrow><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">\overrightarrow { w}= (\overrightarrow { y } -\overrightarrow { h(z) } )\overrightarrow { x }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.272em;"></span><span class="strut bottom" style="height:1.522em;vertical-align:-0.25em;"></span><span class="base"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9525600000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.02691em;">w</span></span></span><span class="svg-align" style="top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width="400em" height="0.522em" viewbox="0 0 400000 522" preserveaspectratio="xMaxYMin slice"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z"/></svg></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9525600000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">y</span></span></span><span class="svg-align" style="top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width="400em" height="0.522em" viewbox="0 0 400000 522" preserveaspectratio="xMaxYMin slice"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"></span></span></span></span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.272em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit">h</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span><span class="svg-align" style="top:-3.75em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width="400em" height="0.522em" viewbox="0 0 400000 522" preserveaspectratio="xMaxYMin slice"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"></span></span></span></span><span class="mclose">)</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9525600000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit">x</span></span></span><span class="svg-align" style="top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width="400em" height="0.522em" viewbox="0 0 400000 522" preserveaspectratio="xMaxYMin slice"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z"/></svg></span></span></span></span></span></span></span></span></span> 一次得到所有的W更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script&gt;
MathJax.Hub.Config({
tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;],[&#39;\\&#39;,&#39;\\&#39;]]}
});
&lt;/script&gt;
&lt;h1 id=&quot;logist&quot;&gt;&lt;a class=&quot;markdown
      
    
    </summary>
    
      <category term="ML" scheme="http://nextnight.github.io/categories/ML/"/>
    
    
      <category term="逻辑回归" scheme="http://nextnight.github.io/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Match-DaGuanCup</title>
    <link href="http://nextnight.github.io/2018/09/29/Match-DaGuanCup/"/>
    <id>http://nextnight.github.io/2018/09/29/Match-DaGuanCup/</id>
    <published>2018-09-29T07:02:57.000Z</published>
    <updated>2018-09-29T07:08:18.192Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Match" scheme="http://nextnight.github.io/categories/Match/"/>
    
    
      <category term="文本分类" scheme="http://nextnight.github.io/tags/%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Match-LianTong</title>
    <link href="http://nextnight.github.io/2018/09/29/Match-LianTong/"/>
    <id>http://nextnight.github.io/2018/09/29/Match-LianTong/</id>
    <published>2018-09-29T06:46:00.000Z</published>
    <updated>2018-09-29T08:39:01.759Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Match" scheme="http://nextnight.github.io/categories/Match/"/>
    
    
      <category term="分类推荐" scheme="http://nextnight.github.io/tags/%E5%88%86%E7%B1%BB%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>Match-YunYiCup</title>
    <link href="http://nextnight.github.io/2018/09/29/Match-Yunyicup/"/>
    <id>http://nextnight.github.io/2018/09/29/Match-Yunyicup/</id>
    <published>2018-09-29T06:42:48.000Z</published>
    <updated>2018-09-29T07:07:08.749Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Match" scheme="http://nextnight.github.io/categories/Match/"/>
    
    
      <category term="文本分类" scheme="http://nextnight.github.io/tags/%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Graph-BayesNetWork</title>
    <link href="http://nextnight.github.io/2018/09/29/Graph-BayesNetWork/"/>
    <id>http://nextnight.github.io/2018/09/29/Graph-BayesNetWork/</id>
    <published>2018-09-29T06:40:58.000Z</published>
    <updated>2018-09-29T07:35:49.614Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="概率图模型" scheme="http://nextnight.github.io/categories/%E6%A6%82%E7%8E%87%E5%9B%BE%E6%A8%A1%E5%9E%8B/"/>
    
    
      <category term="BayesNetWork" scheme="http://nextnight.github.io/tags/BayesNetWork/"/>
    
      <category term="贝叶斯网络" scheme="http://nextnight.github.io/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Graph-CRF条件随机场</title>
    <link href="http://nextnight.github.io/2018/09/29/Graph-CRF%E6%9D%A1%E4%BB%B6%E9%9A%8F%E6%9C%BA%E5%9C%BA/"/>
    <id>http://nextnight.github.io/2018/09/29/Graph-CRF条件随机场/</id>
    <published>2018-09-29T06:30:53.000Z</published>
    <updated>2018-09-29T07:35:18.776Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="概率图模型" scheme="http://nextnight.github.io/categories/%E6%A6%82%E7%8E%87%E5%9B%BE%E6%A8%A1%E5%9E%8B/"/>
    
    
      <category term="CRF" scheme="http://nextnight.github.io/tags/CRF/"/>
    
      <category term="条件随机场" scheme="http://nextnight.github.io/tags/%E6%9D%A1%E4%BB%B6%E9%9A%8F%E6%9C%BA%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Graph-HMM隐马尔科夫</title>
    <link href="http://nextnight.github.io/2018/09/29/Graph-HMM%E9%9A%90%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB/"/>
    <id>http://nextnight.github.io/2018/09/29/Graph-HMM隐马尔科夫/</id>
    <published>2018-09-29T06:30:37.000Z</published>
    <updated>2018-09-29T07:34:54.564Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="概率图模型" scheme="http://nextnight.github.io/categories/%E6%A6%82%E7%8E%87%E5%9B%BE%E6%A8%A1%E5%9E%8B/"/>
    
    
      <category term="HMM" scheme="http://nextnight.github.io/tags/HMM/"/>
    
  </entry>
  
  <entry>
    <title>Math-矩阵分解</title>
    <link href="http://nextnight.github.io/2018/09/29/Math-%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3/"/>
    <id>http://nextnight.github.io/2018/09/29/Math-矩阵分解/</id>
    <published>2018-09-29T06:27:30.000Z</published>
    <updated>2018-09-29T07:29:18.171Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Math" scheme="http://nextnight.github.io/categories/Math/"/>
    
    
      <category term="矩阵分解" scheme="http://nextnight.github.io/tags/%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Math-凸优化问题</title>
    <link href="http://nextnight.github.io/2018/09/29/Math-%E5%87%B8%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98/"/>
    <id>http://nextnight.github.io/2018/09/29/Math-凸优化问题/</id>
    <published>2018-09-29T06:25:00.000Z</published>
    <updated>2018-09-29T07:18:50.840Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="凸优化" scheme="http://nextnight.github.io/categories/%E5%87%B8%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="凸优化" scheme="http://nextnight.github.io/tags/%E5%87%B8%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Math-泰勒展式</title>
    <link href="http://nextnight.github.io/2018/09/29/Math-%E6%B3%B0%E5%8B%92%E5%B1%95%E5%BC%8F/"/>
    <id>http://nextnight.github.io/2018/09/29/Math-泰勒展式/</id>
    <published>2018-09-29T06:21:53.000Z</published>
    <updated>2018-09-29T07:29:40.308Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Math" scheme="http://nextnight.github.io/categories/Math/"/>
    
    
      <category term="泰勒展式" scheme="http://nextnight.github.io/tags/%E6%B3%B0%E5%8B%92%E5%B1%95%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Math-极大似然估计</title>
    <link href="http://nextnight.github.io/2018/09/29/Math-%E6%9E%81%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1/"/>
    <id>http://nextnight.github.io/2018/09/29/Math-极大似然估计/</id>
    <published>2018-09-29T06:21:27.000Z</published>
    <updated>2018-09-29T07:18:26.798Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Math" scheme="http://nextnight.github.io/categories/Math/"/>
    
    
      <category term="MLE" scheme="http://nextnight.github.io/tags/MLE/"/>
    
      <category term="极大似然估计" scheme="http://nextnight.github.io/tags/%E6%9E%81%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>文本处理流程</title>
    <link href="http://nextnight.github.io/2018/09/29/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/"/>
    <id>http://nextnight.github.io/2018/09/29/文本处理流程/</id>
    <published>2018-09-29T05:49:41.000Z</published>
    <updated>2018-10-10T02:52:29.041Z</updated>
    
    <content type="html"><![CDATA[<script>MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)'],['\\','\\']]}});</script><h2 id="文本处理的流程"><a class="markdownIt-Anchor" href="#文本处理的流程"></a> 文本处理的流程</h2><p><code>文本</code>–&gt;<code>分词</code>–&gt;<code>向量化</code>–&gt;<code>建模</code></p><h2 id="1-分词方法"><a class="markdownIt-Anchor" href="#1-分词方法"></a> 1、分词方法</h2><blockquote><p>分词是NLP的基础，无论是文档还是语句都是有基本的词构成，因此分词的好坏直接影响到文本的表示。</p></blockquote><ol><li>基本匹配分词</li></ol><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">此方法按照不同的扫描方式，逐个查找词库进行分词。</span><br><span class="line">根据扫描方式可细分为：</span><br><span class="line">    正向最大匹配</span><br><span class="line">    反向最大匹配</span><br><span class="line">    双向最大匹配</span><br><span class="line">    最小切分<span class="comment">(即最短路径)</span></span><br><span class="line">总之就是各种不同的启发规则</span><br></pre></td></tr></table></figure><ol start="2"><li>全局切分+语言模型分词</li></ol><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 基本操作：</span></span><br><span class="line"><span class="ruby">  <span class="number">1</span>、它首先切分出与词库匹配的所有可能的词，</span></span><br><span class="line"><span class="ruby">  <span class="number">2</span>、再运用统计语言模型决定最优的切分结果。【一般采用viterbi算法寻找找最优的组合】</span></span><br><span class="line"><span class="ruby">- 优点：</span></span><br><span class="line"><span class="ruby">  <span class="number">1</span>、在于可以解决分词中的歧义问题。</span></span><br><span class="line"><span class="ruby">- 示例：</span></span><br><span class="line"><span class="ruby">  对于文本串“南京市长江大桥”，首先进行词条检索(一般用Trie存储)，找到匹配的所有词条（南京，市，长江，大桥，南京市，长江大桥，市长，江大桥，江大，桥），以词网格(word lattices)形式表示，接着做路径搜索，基于统计语言模型(例如n-gram)找到最优路径，最后可能还需要命名实体识别。</span></span><br></pre></td></tr></table></figure><ol start="3"><li>以字构词</li></ol><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- 基本操作：</span><br><span class="line">  <span class="number">1</span>、将分词问题转化为了单个字的分类问题(序列标签)，为每一个字打上<span class="string">'B'</span>,<span class="string">'I'</span>,<span class="string">'E'</span>,<span class="string">'S'</span>五个标签中的一个。其中<span class="string">'B'</span>:一个词的开头，<span class="string">'I'</span>:一个词的中间，<span class="string">'E'</span>:一个词的结尾，<span class="string">'S'</span>:单个字成词。</span><br><span class="line">  <span class="number">2</span>、通过统计信息得到每个字的标签的概率，然后采用<span class="string">'Viterbi算法'</span>得到最优的结果。</span><br><span class="line">- 优点：</span><br><span class="line">  <span class="number">1</span>、具有新词发现功能，准确率较高。</span><br><span class="line">- 实现：</span><br><span class="line">  <span class="number">1</span>、<span class="string">'HMM分词'</span>,</span><br><span class="line">  <span class="number">2</span>、<span class="string">'CRF分词'</span>,</span><br><span class="line">  <span class="number">3</span>、<span class="string">'深度学习分词'</span></span><br><span class="line"></span><br><span class="line">- [<span class="number">1</span>] 深度学习分词的流程：</span><br><span class="line">    <span class="number">-1</span>、将每一个字<span class="symbol">Lookup</span> <span class="symbol">Table</span>映射到一个固定长度的特征向量.</span><br><span class="line">    <span class="number">-2</span>、经过一个标准的神经网络：liner-sigmod-liner三层<span class="string">'同样得到每个字属于B,I,E,S四个Tag的概率'</span>.</span><br><span class="line">    <span class="number">-3</span>、采用<span class="string">'Viterbi算法'</span>求得最优结果.</span><br><span class="line"></span><br><span class="line">- [<span class="number">2</span>] <span class="symbol">HMM</span>分词 <span class="symbol">VS</span> <span class="symbol">CRF</span>分词</span><br><span class="line">    <span class="symbol">CRF</span>：目前效果已经优于<span class="symbol">HMM</span>，无论是新词发现还是实体识别，人名识别。</span><br><span class="line">    优点:</span><br><span class="line">        <span class="number">1</span>、在于<span class="symbol">CRF</span>既可以像最大熵模型一样加各种领域feature。</span><br><span class="line">        <span class="number">2</span>、又避免了<span class="symbol">HMM</span>的齐次马尔科夫假设。</span><br></pre></td></tr></table></figure><h2 id="2-语言模型"><a class="markdownIt-Anchor" href="#2-语言模型"></a> 2、语言模型：</h2><blockquote><p>语言模型是用来计算一句话生成概率的模型，</p></blockquote><h3 id="1-语言模型的演变"><a class="markdownIt-Anchor" href="#1-语言模型的演变"></a> 1、语言模型的演变</h3><p>[1.1] bayes:</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 定义：每个词出现的概率取决于前面所有的词</span></span><br><span class="line"><span class="ruby">- 公式：P(w_m) = p(w_m<span class="params">|w_&#123;m-1&#125;,w_&#123;m-2&#125;..w_1)</span></span></span><br><span class="line"><span class="ruby">- P(S)：P(S) = P(w_1)*p(w_2)...p(w_n),n为词或字个数,P(S)表示句子概率</span></span><br><span class="line"><span class="ruby">- 缺点：计算过于复杂，甚至难以计算</span></span><br><span class="line"><span class="ruby">- 简化：朴素贝叶斯，条件独立性假设</span></span><br></pre></td></tr></table></figure><p>[1.2] n-gram：n元词型</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 定义：衍生自HMM，它利用马尔科夫假设，认为句子中每个单词只与其前n–<span class="number">1</span>个单词有关，即假设产生w_m这个词的条件概率只依赖于前n–<span class="number">1</span>个词。其中n越大，模型可区别性越强，n越小，模型可靠性越高。</span></span><br><span class="line"><span class="ruby">- 公式：p(w_m) = p(w_m<span class="params">|w_&#123;m-n+1&#125;...,w_&#123;m-1&#125;))</span></span></span><br><span class="line"><span class="ruby">- P(S)：P(S) = P(w_1)*p(w_2)...p(w_n),n为词或字个数,P(S)表示句子概率</span></span><br><span class="line"><span class="ruby">- 优点：</span></span><br><span class="line"><span class="ruby">    <span class="number">1</span>、简单有效，多元词型组合可以得到更丰富的信息</span></span><br><span class="line"><span class="ruby">    <span class="number">2</span>、考虑了词的位置关系</span></span><br><span class="line"><span class="ruby">- 不足：</span></span><br><span class="line"><span class="ruby">    <span class="number">1</span>、没有考虑到词语的相似性</span></span><br><span class="line"><span class="ruby">    <span class="number">2</span>、没有考虑词法，语法，以及语义信息</span></span><br><span class="line"><span class="ruby">    <span class="number">3</span>、仍然存在数据稀疏的问题</span></span><br></pre></td></tr></table></figure><p>[1.3] ffnnlm：前馈神经网络语言模型</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 定义：基于n-gram的语言模型，他将词<span class="string">"w_m"</span>的前n-<span class="number">1</span>个词p(w<span class="number">_</span>&#123;m-n+<span class="number">1</span>&#125;...p(w<span class="number">_</span>&#123;m-<span class="number">1</span>&#125;))映射到词向量空间，然后把它们拼接起来得到一个更大的词向量作为神经网络的输入，<span class="string">'输出'</span>的是p(w_m)</span></span><br><span class="line"><span class="ruby">- 优点：</span></span><br><span class="line"><span class="ruby">    <span class="number">1</span>、词语之间的相似性可以通过词向量来体现</span></span><br><span class="line"><span class="ruby">    <span class="number">2</span>、自带平滑功能</span></span><br></pre></td></tr></table></figure><p>[1.4] rnnlm:循环神经网络语言模型</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> rnnlm特点：可以存在有向环，将上一次的输出作为本次的输入。</span></span><br><span class="line"><span class="ruby">- rnnlm和ffnnlm的最大区别是：ffnnmm要求输入的上下文是固定长度的，也就是说n-gram中的 n要求是个固定值，而rnnlm不限制上下文的长度，可以真正充分地利用所有上文信息来预测下一个词，本次预测的中间隐层信息(例如下图中的context信息)可以在下一次预测里循环使用。</span></span><br><span class="line"><span class="ruby">- 基本结构：</span></span><br><span class="line"><span class="ruby">    <span class="number">1</span>、输入层：</span></span><br><span class="line"><span class="ruby">    <span class="number">2</span>、隐藏层：</span></span><br><span class="line"><span class="ruby">    <span class="number">3</span>、输出层：</span></span><br><span class="line"><span class="ruby">- 预测步骤：</span></span><br><span class="line"><span class="ruby">    <span class="number">1</span>、单词w<span class="number">_</span>&#123;m-<span class="number">1</span>&#125;映射到词向量，记作input(t)</span></span><br><span class="line"><span class="ruby">    <span class="number">2</span>、连接上一次训练的隐藏层context(t–<span class="number">1</span>)，经过sigmoid function，生成当前t时刻的context(t)</span></span><br><span class="line"><span class="ruby">    <span class="number">3</span>、利用softmax function，预测P(w_m)</span></span><br><span class="line"><span class="ruby">- 缺点：基于RNN的语言模型利用BPTT(BackPropagation through time)算法比较难于训练，原因就是深度神经网络里比较普遍的梯度消失问题。</span></span><br><span class="line"><span class="ruby">- 优点：训练精度高</span></span><br></pre></td></tr></table></figure><p>[1.5] lstmlm:长短记忆神经网络</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> lstmlm特点：</span></span><br><span class="line"><span class="ruby">    <span class="number">1</span>、也是一种RNN网络，通过结构的修改避免了梯度消失。</span></span><br><span class="line"><span class="ruby">    <span class="number">2</span>、能够记忆更多的信息。</span></span><br></pre></td></tr></table></figure><h3 id="2-n-gram的基本原理"><a class="markdownIt-Anchor" href="#2-n-gram的基本原理"></a> 2、N-gram的基本原理</h3><blockquote><p>N-gram即N元语法模型，采用马尔科夫假设，认为一个词生成的概率取决于他前面的N-1个词。</p></blockquote><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- 约定：</span><br><span class="line">    s:代表句子</span><br><span class="line">    w_i:第i个词</span><br><span class="line">    w_n:代表第n个词</span><br><span class="line">    N:词数</span><br><span class="line">- 句子s生成的概率如下：</span><br><span class="line">    P<span class="params">(s)</span> = p<span class="params">(w_1)</span>p<span class="params">(w_2)</span>p<span class="params">(w_3)</span>...p(w_n)</span><br><span class="line">- "为了避免数据溢出、提高性能，通常会使用取 log 后使用加法运算替代乘法运算"即：</span><br><span class="line">- log<span class="params">(p(s))</span> = log<span class="params">(p(w_1))</span>+log<span class="params">(p(w_2))</span>+log<span class="params">(p(w_3))</span>...log(p(w_n))</span><br></pre></td></tr></table></figure><p>[2.1]、<code>bigram</code>:假设一个词生成的概率、取决于他前面1个词</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- 句子s生成的概率如下：</span><br><span class="line">    P<span class="comment">(s)</span> = p<span class="comment">(w_1)</span>p<span class="comment">(w_2)</span>p<span class="comment">(w_3)</span>...p<span class="comment">(w_n)</span></span><br><span class="line">- bigram下词w_m生成的概率：</span><br><span class="line">    p<span class="comment">(w_1)</span> = p<span class="comment">(w_1)</span></span><br><span class="line">    p<span class="comment">(w_2)</span> = p<span class="comment">(w_2|w_1)</span></span><br><span class="line">    p<span class="comment">(w_3)</span> = p<span class="comment">(w_3|w_2)</span></span><br><span class="line">    ...</span><br><span class="line">    p<span class="comment">(w_m)</span> = p<span class="comment">(w_m|w_m-1)</span></span><br><span class="line">- 得到句子生成的概率：</span><br><span class="line">    P<span class="comment">(s)</span> = p<span class="comment">(w_1)</span>p<span class="comment">(w_2|w_1)</span>p<span class="comment">(w_3|w_2)</span>..p<span class="comment">(w_m|w_m-1)</span>..p<span class="comment">(w_n|w_n-1)</span>-</span><br></pre></td></tr></table></figure><p>[2.2]、<code>trigram</code>:假设一个词的生成概率取决于他前面的2个词</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- 句子s生成的概率如下：</span><br><span class="line">    P<span class="comment">(s)</span> = p<span class="comment">(w_1)</span>p<span class="comment">(w_2)</span>p<span class="comment">(w_3)</span>...p<span class="comment">(w_n)</span></span><br><span class="line">- trigram下词w_m生成的概率：</span><br><span class="line">    p<span class="comment">(w_1)</span> = p<span class="comment">(w_1)</span></span><br><span class="line">    p<span class="comment">(w_2)</span> = p<span class="comment">(w_2|w_1)</span></span><br><span class="line">    p<span class="comment">(w_3)</span> = p<span class="comment">(w_3|w_&#123;1,2&#125;)</span></span><br><span class="line">    ...</span><br><span class="line">    p<span class="comment">(w_m)</span> = p<span class="comment">(w_m|w_&#123;m-2,m-1&#125;)</span></span><br><span class="line">- 得到句子生成的概率：</span><br><span class="line">    P<span class="comment">(s)</span> = p<span class="comment">(w_1)</span>p<span class="comment">(w_2|w_1)</span>p<span class="comment">(w_3|w_1,w_2)</span>..p<span class="comment">(w_m|w_m-2,w_m-1)</span>..p<span class="comment">(w_n|w_n-1,w_n-2)</span>-</span><br></pre></td></tr></table></figure><blockquote><p>如上知道了如何去计算一个句子生成的概率，那么该如何去算其中的每一项呢？其实不过还是频率来表示概率。</p><p><code>bigram</code>中<code>P(w_m) = p(w_m|w_m-1)=count(w_m,w_m-1)/count(w_m-1)</code>即计算当前词的概率用当前词和前一个词共同出现的次数比上前一个词出现的次数。</p></blockquote><p>[2.3] bigram示例：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 语料：</span><br><span class="line">    <span class="built_in">s1</span>：我喜欢西红柿炒鸡蛋</span><br><span class="line">    <span class="built_in">s2</span>：西红柿是我最爱</span><br><span class="line"><span class="symbol">    s3:</span> 我喜欢什么</span><br></pre></td></tr></table></figure><p>单词词频：</p><table><thead><tr><th>word</th><th>我</th><th>喜欢</th><th>西红柿</th><th>炒</th><th>鸡蛋</th><th>是</th><th>最爱</th><th>什么</th></tr></thead><tbody><tr><td>count</td><td>2</td><td>2</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>p(word)</td><td>0.2</td><td>0.2</td><td>0.1</td><td>0.1</td><td>0.1</td><td>0.1</td><td>0.1</td><td>0.1</td></tr></tbody></table><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 句子s1出现的概率：</span><br><span class="line">    p<span class="params">(s1)</span> = p<span class="params">(我)</span>p<span class="params">(喜欢)</span>p<span class="params">(西红柿)</span>p<span class="params">(炒)</span>p<span class="params">(鸡蛋)</span></span><br><span class="line">        = p<span class="params">(我)</span>p<span class="params">(喜欢|我)</span>p<span class="params">(西红柿|喜欢)</span>p<span class="params">(炒|西红柿)</span>p<span class="params">(鸡蛋|炒)</span></span><br><span class="line">- 根据顺序共现得到bigram的共现词频如下：</span><br></pre></td></tr></table></figure><p>顺序共现词频：</p><table><thead><tr><th style="text-align:center">word</th><th>我</th><th>喜欢</th><th>西红柿</th><th>炒</th><th>鸡蛋</th><th>是</th><th>最爱</th><th>什么</th></tr></thead><tbody><tr><td style="text-align:center">我</td><td></td><td>2</td><td></td><td></td><td></td><td></td><td>1</td><td></td></tr><tr><td style="text-align:center">喜欢</td><td></td><td></td><td>1</td><td></td><td></td><td></td><td></td><td>1</td></tr><tr><td style="text-align:center">西红柿</td><td></td><td></td><td></td><td>1</td><td></td><td>1</td><td></td><td></td></tr><tr><td style="text-align:center">炒</td><td></td><td></td><td></td><td></td><td>1</td><td></td><td></td><td></td></tr><tr><td style="text-align:center">鸡蛋</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:center">是</td><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:center">最爱</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:center">什么</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 最后得到句子s1的概率如下：</span><br><span class="line">  p<span class="params">(s1)</span> = p<span class="params">(我)</span>p<span class="params">(喜欢)</span>p<span class="params">(西红柿)</span>p<span class="params">(炒)</span>p<span class="params">(鸡蛋)</span></span><br><span class="line">        = p<span class="params">(我)</span>p<span class="params">(喜欢|我)</span>p<span class="params">(西红柿|喜欢)</span>p<span class="params">(炒|西红柿)</span>p<span class="params">(鸡蛋|炒)</span></span><br><span class="line">        = 0.<span class="number">2</span> * (count(我喜欢)/count(我))</span><br><span class="line">              * (count(喜欢西红柿)/count(喜欢))</span><br><span class="line">              * (count(西红柿炒)/count(西红柿))</span><br><span class="line">              * (count(炒鸡蛋)/count(炒))</span><br></pre></td></tr></table></figure><p>同理可得trigram，n-gram的计算方式，分别去统计N元词出现的次数。得到条件概率。</p><p>[2.4]、数据平滑</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 数据平滑：大规模数据统计方法与有限的训练语料之间必然产生数据稀疏问题，导致零概率问题。为了解决数据稀疏问题，人们为理论模型实用化而进行了众多尝试与努力，诞生了一系列经典的平滑技术。</span><br><span class="line">- 基本思想：“降低已出现 n-gram 的条件概率分布，以使未出现的 n-gram 条件概率分布非零”，且经数据平滑后一定保证概率和为<span class="number">1</span>，</span><br><span class="line">- 平滑技术：</span><br><span class="line">      <span class="number">1</span>、加一平滑：又称拉普拉斯平滑</span><br><span class="line">      Pmle(w_m|w_m<span class="number">-1</span>) = count(w_m,w_m<span class="number">-1</span>)/count(w_m<span class="number">-1</span>)</span><br><span class="line">      Padd1(w_m|w_m<span class="number">-1</span>) = count(w_m,w_m<span class="number">-1</span>)+<span class="number">1</span>/count(w_m<span class="number">-1</span>)+VV代表<span class="number">2</span>元词型的个数。V个二元词型保证概率和为<span class="number">1</span>。</span><br></pre></td></tr></table></figure><h2 id="3-向量化"><a class="markdownIt-Anchor" href="#3-向量化"></a> 3、向量化</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">文本的向量化主要有以下几种：</span><br><span class="line">    <span class="selector-attr">[1]</span> <span class="selector-tag">countvec</span>：词袋模型，词频表示</span><br><span class="line">    <span class="selector-attr">[2]</span> <span class="selector-tag">Tf-idf</span>：基于<span class="selector-tag">bow</span>的权重表示</span><br><span class="line">    <span class="selector-attr">[3]</span> 主题模型<span class="selector-pseudo">:PLSA</span>，<span class="selector-tag">LDA</span></span><br><span class="line">    <span class="selector-attr">[4]</span> 词嵌入：<span class="selector-tag">word2vec</span>,<span class="selector-tag">glove</span>,<span class="selector-tag">fastext</span></span><br><span class="line">约定：</span><br><span class="line">    1、词袋：数据集中所有的的词构成的词集或词典。</span><br><span class="line">    2、词频：一篇文档中某个词出现的次数</span><br></pre></td></tr></table></figure><h3 id="1-词频向量countvec"><a class="markdownIt-Anchor" href="#1-词频向量countvec"></a> 1、词频向量：countvec</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">   定义：把每一篇文档表示为一个长度为词袋大小的向量，向量的每一个维度表示为词袋中的每一个词在此文档中出现的次数。</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">-   优缺点：</span></span><br><span class="line"><span class="ruby">     <span class="number">1</span>、能够一定程度反映词频信息，但是对于多篇文档中都出现的高频词没有银锭的区分度，</span></span><br><span class="line"><span class="ruby">     <span class="number">2</span>、词袋模型向量大多是高维稀疏矩阵。</span></span><br></pre></td></tr></table></figure><h3 id="2-权重向量tf-idf"><a class="markdownIt-Anchor" href="#2-权重向量tf-idf"></a> 2、权重向量：tf-idf</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 定义：词频(TF)x逆文档词频(IDF)用于表示一个词的权重。</span></span><br><span class="line"><span class="ruby">- 优点：</span></span><br><span class="line"><span class="ruby">    <span class="number">1</span>、降低多个文档都出现的高频词汇对重要度的影响。</span></span><br><span class="line"><span class="ruby">    <span class="number">2</span>、提升低频词汇的重要度。</span></span><br><span class="line"><span class="ruby">    <span class="number">3</span>、tf-idf+<span class="string">'N-gram'</span>特征一定程度能够反映语序特征</span></span><br><span class="line"><span class="ruby">- 缺点：</span></span><br><span class="line"><span class="ruby">    <span class="number">1</span>、权重向量也是高维稀疏矩阵.</span></span><br><span class="line"><span class="ruby">    <span class="number">2</span>、不能完全反映语序信息</span></span><br><span class="line"><span class="ruby">    <span class="number">3</span>、不能体现词语间的相似度信息。</span></span><br></pre></td></tr></table></figure><h3 id="3-主题向量plsalda"><a class="markdownIt-Anchor" href="#3-主题向量plsalda"></a> 3、主题向量：plsa,lda</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 定义：通过引入隐变量<span class="string">'主题'</span>将词频向量或者权重向量映射到一个固定维度的稠密向量。</span></span><br><span class="line"><span class="ruby">- 优点：</span></span><br><span class="line"><span class="ruby">    <span class="number">1</span>、降维作用，降低了模型的复杂度和计算量。</span></span><br><span class="line"><span class="ruby">    <span class="number">2</span>、包含了一定的语义信息。</span></span><br><span class="line"><span class="ruby">- 缺点：</span></span><br><span class="line"><span class="ruby">    <span class="number">1</span>、主题数难以确定。</span></span><br><span class="line"><span class="ruby">    <span class="number">2</span>、主题作为一种概率分布表示，难以表述其具体含义，可解释性较差。</span></span><br><span class="line"><span class="ruby">    <span class="number">3</span>、数据量大的时候主题训练耗时较长。</span></span><br></pre></td></tr></table></figure><h3 id="4-词嵌入向量word2vecglovefasttext"><a class="markdownIt-Anchor" href="#4-词嵌入向量word2vecglovefasttext"></a> 4、词嵌入向量:word2vec,glove,fasttext</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 定义：通过训练将每一个词映射到固定长度的词向量空间中，每个词就是一个点，同时引入距离的概念，就可以描述词语的相似度。</span></span><br><span class="line"><span class="ruby">- 优点：</span></span><br><span class="line"><span class="ruby">    <span class="number">1</span>、考虑到了词语的相似度信息。</span></span><br><span class="line"><span class="ruby">    <span class="number">2</span>、维度固定且低维，便于后续计算。</span></span><br><span class="line"><span class="ruby">    <span class="number">3</span>、自带平滑功能</span></span><br><span class="line"><span class="ruby">- 缺点：</span></span><br><span class="line"><span class="ruby">    <span class="number">1</span>、好的词向量表示依赖于足够的训练预料，尤其是领域性较强的文本依赖于相关的领域文本，否则可能得不到足够好的词向量。</span></span><br><span class="line"><span class="ruby">    <span class="number">2</span>、词向量的训练需要额外的步骤。且大语料的训练耗时。</span></span><br></pre></td></tr></table></figure><h2 id="word2vec"><a class="markdownIt-Anchor" href="#word2vec"></a> Word2Vec</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 模型结构：</span></span><br><span class="line"><span class="ruby">    <span class="params">|--&gt;输入层</span></span></span><br><span class="line"><span class="ruby">        <span class="params">|--&gt;隐藏层</span></span></span><br><span class="line"><span class="ruby">            <span class="params">|--&gt;softmax</span></span></span><br><span class="line"><span class="ruby">- 两种实现方式：</span></span><br><span class="line"><span class="ruby">    <span class="number">1</span>、cbow</span></span><br><span class="line"><span class="ruby">    <span class="number">2</span>、skip-gram</span></span><br><span class="line"><span class="ruby">- 两种优化方式：</span></span><br><span class="line"><span class="ruby">    <span class="number">1</span>、层次化softmax</span></span><br><span class="line"><span class="ruby">    <span class="number">2</span>、负采样</span></span><br></pre></td></tr></table></figure><p>🐱目标函数：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> <span class="symbol">w:</span>词w</span></span><br><span class="line"><span class="ruby">- <span class="symbol">C:</span>语料库</span></span><br><span class="line"><span class="ruby">- Context(w)<span class="symbol">:</span>词w的上下文信息</span></span><br></pre></td></tr></table></figure><ul><li><p>cbow:p(w|Context(w))：上下文词出现的情况下，词w出现的概率，即共现的概率。也是优化的目标，最大化这个概率。那么对与整个语料来说，目标函数就是最大化如下的概率积</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>=</mo><munder><mo>∏</mo><mrow><mi>w</mi><mi>ϵ</mi><mi>C</mi></mrow></munder><mi>p</mi><mo>(</mo><mi>w</mi><mi mathvariant="normal">∣</mi><mi>C</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>(</mo><mi>w</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">L = \prod_{w\epsilon C}p(w|Context(w))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.0500050000000003em;"></span><span class="strut bottom" style="height:2.344341em;vertical-align:-1.294336em;"></span><span class="base"><span class="mord mathit">L</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.855664em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.02691em;">w</span><span class="mord mathit mtight">ϵ</span><span class="mord mathit mtight" style="margin-right:0.07153em;">C</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.294336em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit">p</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mord">∣</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit">o</span><span class="mord mathit">n</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord mathit">x</span><span class="mord mathit">t</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p></li><li><p>skip-gram:以当前词预测上下文词的概率，即目标函数就是最大化当前词出现的时候上下文词出现的概率积。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>=</mo><munder><mo>∏</mo><mrow><mi>w</mi><mi>ϵ</mi><mi>C</mi></mrow></munder><mi>p</mi><mo>(</mo><mi>C</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>(</mo><mi>w</mi><mo>)</mo><mi mathvariant="normal">∣</mi><mi>w</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">L = \prod_{w\epsilon C}p(Context(w)|w)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.0500050000000003em;"></span><span class="strut bottom" style="height:2.344341em;vertical-align:-1.294336em;"></span><span class="base"><span class="mord mathit">L</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.855664em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.02691em;">w</span><span class="mord mathit mtight">ϵ</span><span class="mord mathit mtight" style="margin-right:0.07153em;">C</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.294336em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit">p</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit">o</span><span class="mord mathit">n</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord mathit">x</span><span class="mord mathit">t</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mord">∣</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mclose">)</span></span></span></span></span></p></li><li><p>最大对数似然：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>=</mo><munder><mo>∑</mo><mrow><mi>w</mi><mi>ϵ</mi><mi>C</mi></mrow></munder><mi>l</mi><mi>o</mi><mi>g</mi><mo>(</mo><mi>p</mi><mo>(</mo><mi>w</mi><mi mathvariant="normal">∣</mi><mi>C</mi><mi>o</mi><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>(</mo><mi>w</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">L = \sum_{w\epsilon C}log(p(w|Cotext(w))))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.0500050000000003em;"></span><span class="strut bottom" style="height:2.344341em;vertical-align:-1.294336em;"></span><span class="base"><span class="mord mathit">L</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.855664em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.02691em;">w</span><span class="mord mathit mtight">ϵ</span><span class="mord mathit mtight" style="margin-right:0.07153em;">C</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.294336em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathit">p</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mord">∣</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit">o</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord mathit">x</span><span class="mord mathit">t</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>=</mo><munder><mo>∑</mo><mrow><mi>w</mi><mi>ϵ</mi><mi>C</mi></mrow></munder><mi>l</mi><mi>o</mi><mi>g</mi><mo>(</mo><mi>p</mi><mo>(</mo><mi>C</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo>(</mo><mi>w</mi><mo>)</mo><mi mathvariant="normal">∣</mi><mi>w</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">L = \sum_{w\epsilon C}log(p(Context(w)|w))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.0500050000000003em;"></span><span class="strut bottom" style="height:2.344341em;vertical-align:-1.294336em;"></span><span class="base"><span class="mord mathit">L</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.855664em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.02691em;">w</span><span class="mord mathit mtight">ϵ</span><span class="mord mathit mtight" style="margin-right:0.07153em;">C</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.294336em;"></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathit">p</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord mathit">o</span><span class="mord mathit">n</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord mathit">x</span><span class="mord mathit">t</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mord">∣</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p></li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 训练过程：</span><br><span class="line">    1、输入层：随机初始化w的context<span class="params">(w)</span>的每一个词<span class="params">(前后各c个)</span>的词向量V<span class="params">(w)</span>。</span><br><span class="line">    2、投影层：将词w的context<span class="params">(w)</span>的所有V<span class="params">(w)</span>求和。</span><br><span class="line">    3、输出层：层次化softmax层，一颗二叉树，用计算得到的输出每个词的概率。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script&gt;
MathJax.Hub.Config({
tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;],[&#39;\\&#39;,&#39;\\&#39;]]}
});
&lt;/script&gt;
&lt;h2 id=&quot;文本处理的流程&quot;&gt;&lt;a class=&quot;markdow
      
    
    </summary>
    
      <category term="ML" scheme="http://nextnight.github.io/categories/ML/"/>
    
      <category term="NLP" scheme="http://nextnight.github.io/categories/ML/NLP/"/>
    
    
      <category term="分词" scheme="http://nextnight.github.io/tags/%E5%88%86%E8%AF%8D/"/>
    
      <category term="向量化" scheme="http://nextnight.github.io/tags/%E5%90%91%E9%87%8F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>mac jupyter中文显示设置</title>
    <link href="http://nextnight.github.io/2018/09/13/Mac-jupyter%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E8%AE%BE%E7%BD%AE/"/>
    <id>http://nextnight.github.io/2018/09/13/Mac-jupyter中文显示设置/</id>
    <published>2018-09-13T15:08:34.000Z</published>
    <updated>2018-09-29T07:12:29.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac-jupyter使用matplotlib时设置中文"><a class="markdownIt-Anchor" href="#mac-jupyter使用matplotlib时设置中文"></a> MAC-Jupyter使用matplotlib时设置中文</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> _rebuild</span><br><span class="line">_rebuild()</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文显示</span></span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">'font.family'</span>]=[<span class="string">'Microsoft Yahei'</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mac-jupyter使用matplotlib时设置中文&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mac-jupyter使用matplotlib时设置中文&quot;&gt;&lt;/a&gt; MAC-Jupyter使用matplotlib时设置中文&lt;/h
      
    
    </summary>
    
      <category term="Python" scheme="http://nextnight.github.io/categories/Python/"/>
    
    
      <category term="Jupyter" scheme="http://nextnight.github.io/tags/Jupyter/"/>
    
      <category term="matplotlib" scheme="http://nextnight.github.io/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Pandas基本操作</title>
    <link href="http://nextnight.github.io/2018/09/13/Pandas%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://nextnight.github.io/2018/09/13/Pandas基本操作/</id>
    <published>2018-09-13T14:58:52.000Z</published>
    <updated>2018-09-19T01:51:49.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pandas-操作分类"><a class="markdownIt-Anchor" href="#pandas-操作分类"></a> Pandas 操作分类</h1><ul><li>基本设置</li><li>数据描述</li><li>数据清洗</li><li>数据索引</li><li>数据连接</li><li>分组聚合</li><li>文本操作</li></ul><h1 id="基本设置"><a class="markdownIt-Anchor" href="#基本设置"></a> 基本设置</h1><p>① ：设置不使用科学计数法，保留5位小数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.set_option(<span class="string">'display.float_format'</span>, <span class="keyword">lambda</span> x: <span class="string">'%.5f'</span> % x)</span><br></pre></td></tr></table></figure><p>② : 设置显示结果的宽度(不截断换行)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.set_option(<span class="string">'display.width'</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h1 id="数据读取"><a class="markdownIt-Anchor" href="#数据读取"></a> 数据读取</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pd.read_csv()</span><br><span class="line">pd.read_table()</span><br><span class="line">pd.read_excle()</span><br><span class="line">pd.read_html()</span><br><span class="line">pd.read_json()</span><br><span class="line">pd.read_sql()</span><br></pre></td></tr></table></figure><h1 id="数据描述"><a class="markdownIt-Anchor" href="#数据描述"></a> 数据描述</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_csv(<span class="string">"path"</span>)</span><br></pre></td></tr></table></figure><p>①：查看数据属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看属性</span></span><br><span class="line">df.shape</span><br><span class="line">df.index</span><br><span class="line">df.columns</span><br><span class="line">df.size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除格式，获取数据数组</span></span><br><span class="line">df.values</span><br></pre></td></tr></table></figure><p>②：查看数据信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据信息</span></span><br><span class="line">df.head(n) <span class="comment"># 查看前n行</span></span><br><span class="line">df.tail(n) <span class="comment"># 查看尾n行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据信息</span></span><br><span class="line">df.info()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据描述：</span></span><br><span class="line">df.describe()            <span class="comment"># 所有列描述</span></span><br><span class="line">df[<span class="string">'col_name'</span>].describe()<span class="comment"># 某一列描述</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计某列每个值的量:默认会从大到小排序</span></span><br><span class="line">df[<span class="string">'clo_name'</span>].value_counts(sort=<span class="keyword">True</span>,ascending=<span class="keyword">False</span>,bins=<span class="keyword">None</span>,dropna=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h1 id="数据索引"><a class="markdownIt-Anchor" href="#数据索引"></a> 数据索引</h1><h3 id="索引设置"><a class="markdownIt-Anchor" href="#索引设置"></a> 索引设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""index,索引操作</span></span><br><span class="line"><span class="string">  1、set_index()</span></span><br><span class="line"><span class="string">  2、reset_index()</span></span><br><span class="line"><span class="string">  3、rename()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 设置索引</span></span><br><span class="line">df.set_index(<span class="string">'A'</span>) <span class="comment"># 设置列A为索引列</span></span><br><span class="line"><span class="comment"># 重置索引:恢复默认的自增索引</span></span><br><span class="line">df.reset_index(inplace=<span class="keyword">True</span>) <span class="comment"># 设置inplace的时候会修改原始df,并且没有返回值</span></span><br><span class="line">df = df.reset_index()        <span class="comment"># 不设置inplace=True需接受返回值，且原始df不变</span></span><br><span class="line">df.rename(index=<span class="keyword">lambda</span> x:x+<span class="number">1</span>)<span class="comment"># 所有索引值+1</span></span><br><span class="line"><span class="string">"""修改列名</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">df.rename(&#123;<span class="string">"A"</span>:<span class="string">"AAAAA"</span>,<span class="string">"B"</span>:<span class="string">"BBBB"</span>&#125;,inplace=<span class="keyword">True</span>) <span class="comment"># 把A修改成AAAAA</span></span><br><span class="line">df.rename(columns=<span class="keyword">lambda</span> x: x + <span class="number">2</span>) <span class="comment"># 将全体列重命名</span></span><br></pre></td></tr></table></figure><h3 id="索引数据"><a class="markdownIt-Anchor" href="#索引数据"></a> 索引数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""直接列索引：</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">df[<span class="number">1</span>] <span class="comment"># 第一列</span></span><br><span class="line">df[<span class="string">'Q'</span>] <span class="comment">#Q列</span></span><br><span class="line"></span><br><span class="line"><span class="string">""""行索引：</span></span><br><span class="line"><span class="string">  1、iloc</span></span><br><span class="line"><span class="string">  2、loc</span></span><br><span class="line"><span class="string">  3、ix</span></span><br><span class="line"><span class="string">"""</span><span class="string">"</span></span><br><span class="line"><span class="string">df.loc[df['Q']=0]  # 索引满足Q=0的虽偶有行数据</span></span><br><span class="line"><span class="string">df.loc[(df['Q'] &amp; df['T']=1)]</span></span><br><span class="line"><span class="string">df.loc[(df['Q'] &amp; df['T']=1) 'x'] = -1 # 满足条件的所有行数据给X 列赋值为-1</span></span><br></pre></td></tr></table></figure><h1 id="数据清洗"><a class="markdownIt-Anchor" href="#数据清洗"></a> 数据清洗</h1><h3 id="数据缺失处理"><a class="markdownIt-Anchor" href="#数据缺失处理"></a> 数据缺失处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""判断缺失:</span></span><br><span class="line"><span class="string">  1、isnull(),</span></span><br><span class="line"><span class="string">  2、isna()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">df.isnull() <span class="comment"># 返回每个数据是否是null</span></span><br><span class="line">df.isna()   <span class="comment"># 返回每个数据是否是na</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""缺失填充:</span></span><br><span class="line"><span class="string">  1、fillna(),</span></span><br><span class="line"><span class="string">  2、ffill(),</span></span><br><span class="line"><span class="string">  3、bfill()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">df.ffill()</span><br><span class="line">df.bfill()</span><br><span class="line">df.fillna(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""缺失删除:dropna()</span></span><br><span class="line"><span class="string">param:</span></span><br><span class="line"><span class="string">  axis:1,0 axis=1 删除含有na的列,axis=0 删除含有na的行,</span></span><br><span class="line"><span class="string">  how:any,all how='any'表示某列所有行存在为null即删除,how='all'，表示某行所有列都为null才删除</span></span><br><span class="line"><span class="string">  subset:选择子集</span></span><br><span class="line"><span class="string">  inplace:是否覆盖原数据</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">df = df.dropna(self, axis=<span class="number">0</span>, how=<span class="string">'any'</span>, thresh=<span class="keyword">None</span>, subset=<span class="keyword">None</span>,inplace=<span class="keyword">False</span>)</span><br><span class="line">df.dropna(self, axis=<span class="number">1</span>, how=<span class="string">'all'</span>, thresh=<span class="keyword">None</span>, subset=[<span class="string">'col1'</span>,<span class="string">'col2'</span>],inplace=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h3 id="数据异常处理"><a class="markdownIt-Anchor" href="#数据异常处理"></a> 数据异常处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""数据删除:drop()</span></span><br><span class="line"><span class="string">param:</span></span><br><span class="line"><span class="string">  axis:0,1 分别对应indexs,columns</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">df.drop(self, labels=<span class="keyword">None</span>, axis=<span class="number">0</span>, index=<span class="keyword">None</span>, columns=<span class="keyword">None</span>, level=<span class="keyword">None</span>,</span><br><span class="line">             inplace=<span class="keyword">False</span>, errors=<span class="string">'raise'</span>)</span><br><span class="line"></span><br><span class="line">df.drop([<span class="string">'a'</span>,<span class="string">'b'</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>) <span class="comment"># 删除a，b列</span></span><br><span class="line">df.drop([<span class="number">0</span>,<span class="number">1</span>],axis=<span class="number">0</span>,inplace=<span class="keyword">True</span>) <span class="comment"># 删除0，1行</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""数据删除：del</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">del</span> df[<span class="string">'A'</span>]  <span class="comment"># 删除A列</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""数值替换:replace()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">df.replace([<span class="number">1</span>,<span class="number">3</span>],[<span class="string">'one'</span>,<span class="string">'three'</span>]) <span class="comment"># 1替换成one,3替换成three</span></span><br><span class="line">df.rename(&#123;<span class="number">1</span>:<span class="string">'one'</span>,<span class="number">3</span>:<span class="string">'three'</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="数据过滤选择"><a class="markdownIt-Anchor" href="#数据过滤选择"></a> 数据过滤,选择</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df[(df[<span class="string">'age'</span>]&gt;<span class="number">10</span>) &amp; (df[<span class="string">'age'</span>]&lt;<span class="number">40</span>) ]</span><br><span class="line">df.loc[(df[<span class="string">'age'</span>]&gt;<span class="number">10</span>) &amp; (df[<span class="string">'age'</span>]&lt;<span class="number">40</span>) ]</span><br><span class="line">df[df[<span class="string">'age'</span>]==<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">df[df[<span class="string">'age'</span>].isin([<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]) ]</span><br></pre></td></tr></table></figure><h3 id="数据排序"><a class="markdownIt-Anchor" href="#数据排序"></a> 数据排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""排序：sort_values(by='column',inplace=None,acsending=True)  </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">df.sort_values(by=<span class="string">''</span>,inplace=<span class="keyword">True</span>,acsending=<span class="keyword">False</span>) <span class="comment"># acsending=False 从大到小</span></span><br></pre></td></tr></table></figure><h3 id="数据编码"><a class="markdownIt-Anchor" href="#数据编码"></a> 数据编码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""one_hot:get_dummies()</span></span><br><span class="line"><span class="string">"""</span><span class="string">"</span></span><br><span class="line"><span class="string">dt_one_hot = pd.get_dummies(dt[['A','B']]) # 对A，B 列进行onehot编码</span></span><br></pre></td></tr></table></figure><h3 id="数据分箱"><a class="markdownIt-Anchor" href="#数据分箱"></a> 数据分箱</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""df.cut()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">df_col1 = pd.cut(df[<span class="string">'column1'</span>], bins=[<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">0.8</span>, <span class="number">2</span>, <span class="number">20</span>, <span class="number">1000</span>], labels=np.arange(<span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pandas-操作分类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pandas-操作分类&quot;&gt;&lt;/a&gt; Pandas 操作分类&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;基本设置&lt;/li&gt;
&lt;li&gt;数据描述&lt;/li&gt;
&lt;li&gt;数据清洗&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="Python" scheme="http://nextnight.github.io/categories/Python/"/>
    
      <category term="Pandas" scheme="http://nextnight.github.io/categories/Python/Pandas/"/>
    
    
      <category term="Python" scheme="http://nextnight.github.io/tags/Python/"/>
    
      <category term="Pandas" scheme="http://nextnight.github.io/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Numpy基本操作</title>
    <link href="http://nextnight.github.io/2018/09/10/Numpy%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://nextnight.github.io/2018/09/10/Numpy基本操作/</id>
    <published>2018-09-10T14:45:39.000Z</published>
    <updated>2018-09-15T02:25:03.415Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="string">"""numpy的基本应用</span></span><br><span class="line"><span class="string">1、四个属性</span></span><br><span class="line"><span class="string">    ndim:获取数据的维度数</span></span><br><span class="line"><span class="string">    shape:收取数据的维度</span></span><br><span class="line"><span class="string">    dtype:获取数据的类型</span></span><br><span class="line"><span class="string">    size:</span></span><br><span class="line"><span class="string">2、N个方法</span></span><br><span class="line"><span class="string">    1、zeros,ones,empty,arange</span></span><br><span class="line"><span class="string">    2、max,min,std,mean,sum,var,median,cumsum</span></span><br><span class="line"><span class="string">    3、astype,reshape</span></span><br><span class="line"><span class="string">    4、argmax,argmin,argsort</span></span><br><span class="line"><span class="string">    5、all,any,fill,where，diff</span></span><br><span class="line"><span class="string">    6、vstack,hstack</span></span><br><span class="line"><span class="string">    7、unique</span></span><br><span class="line"><span class="string">    8、load,save:操作文件</span></span><br><span class="line"><span class="string">    9、insert,arange,reshape</span></span><br><span class="line"><span class="string">    10、bincount</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numpy_filed</span><span class="params">()</span>:</span></span><br><span class="line">    ll = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">                   [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>]])</span><br><span class="line">    print(ll)</span><br><span class="line">    print(ll.ndim)  <span class="comment"># 2；表示2个维度</span></span><br><span class="line">    print(ll.shape)  <span class="comment"># (5,):表示五个元素</span></span><br><span class="line">    print(ll.dtype)  <span class="comment"># 元素类型int64:表示数据类型</span></span><br><span class="line">    print(ll.size)  <span class="comment"># 10：元素个数</span></span><br><span class="line">    print(type(ll))  <span class="comment"># 对象类型&lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numpy_method</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    max,min,std,mean,sum,var,median,cumsum</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    astype:转换数据类型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    argmax,argmin,argsort</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    all,any,fill,where</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    vstack,hstack</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    load,save:操作文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    insert,arange,reshape</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ll = np.array([[<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">                   [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># max,min,std,mean,sum,var,median,cumsum</span></span><br><span class="line">    print(ll.max())        <span class="comment"># 全局最大值</span></span><br><span class="line">    print(ll.max(axis=<span class="number">1</span>))  <span class="comment"># axis=1：行最大值 [6 7]</span></span><br><span class="line">    print(ll.max(axis=<span class="number">0</span>))  <span class="comment"># axis=0 列最大 [2 4 4 5 7]</span></span><br><span class="line">    print(ll.cumsum())     <span class="comment"># 前所有项的和组成的序列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># astype: 转换数据类型</span></span><br><span class="line">    ll = ll.astype(dtype=np.float64)</span><br><span class="line">    print(ll.dtype)        <span class="comment"># float64</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># argmax, argmin, argsort</span></span><br><span class="line">    print(ll.argmax(axis=<span class="number">1</span>)) <span class="comment"># axis=1 返回每行的最大数值的索引[4,4]</span></span><br><span class="line">    print(ll.argmin(axis=<span class="number">0</span>)) <span class="comment"># axis=0 返回每列的最小值的索引 [1 1 1 0 1]</span></span><br><span class="line">    print(ll.argsort(axis=<span class="number">0</span>))<span class="comment"># 按行排序返回排序后的索引，未指定排序的列，就是返回所有的列排序的结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># all,any,fill,where，diff</span></span><br><span class="line">    <span class="comment"># all()全部满足条件，any()存在满足条件的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># vstack,hstack</span></span><br><span class="line">    p1 = np.zeros((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">    p2 = np.ones((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">    print(<span class="string">"纵向叠加：\n"</span>,np.vstack((p1,p2))) <span class="comment"># 数据拼接，维度不变</span></span><br><span class="line">    print(<span class="string">"横向叠加：\n"</span>,np.hstack((p1,p2))) <span class="comment"># 数据连接，行数不变</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># unique：找出唯一值并返回排序后的结果</span></span><br><span class="line">    print(np.unique(ll))      <span class="comment"># [1. 2. 3. 4. 5. 6. 7.]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    numpy_filed()</span><br><span class="line">    numpy_method()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="Python" scheme="http://nextnight.github.io/categories/Python/"/>
    
      <category term="Numpy" scheme="http://nextnight.github.io/categories/Python/Numpy/"/>
    
    
      <category term="Python" scheme="http://nextnight.github.io/tags/Python/"/>
    
      <category term="Numpy" scheme="http://nextnight.github.io/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>Python代码片段</title>
    <link href="http://nextnight.github.io/2018/09/10/Python%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>http://nextnight.github.io/2018/09/10/Python代码片段/</id>
    <published>2018-09-10T14:03:51.000Z</published>
    <updated>2018-09-29T07:25:46.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-多变量赋值"><a class="markdownIt-Anchor" href="#1-多变量赋值"></a> 1、多变量赋值</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d = <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br></pre></td></tr></table></figure><h1 id="2-列表赋值"><a class="markdownIt-Anchor" href="#2-列表赋值"></a> 2、列表赋值</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">"ami"</span>, <span class="string">"kimi"</span>, <span class="string">"jsm"</span>]</span><br><span class="line">a, b, c = names</span><br></pre></td></tr></table></figure><h1 id="3-条件表达式"><a class="markdownIt-Anchor" href="#3-条件表达式"></a> 3、条件表达式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">8</span></span><br><span class="line">d = x <span class="keyword">if</span> x &gt; <span class="number">5</span> <span class="keyword">else</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h1 id="4-列表推导式"><a class="markdownIt-Anchor" href="#4-列表推导式"></a> 4、列表推导式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h1 id="5-条件判断不是用and"><a class="markdownIt-Anchor" href="#5-条件判断不是用and"></a> 5、条件判断:不是用and</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">80</span> &lt; x &lt; <span class="number">100</span>: print(x)</span><br></pre></td></tr></table></figure><h1 id="6-判断是否在不在某列表字符串"><a class="markdownIt-Anchor" href="#6-判断是否在不在某列表字符串"></a> 6、判断是否在/不在某列表,字符串</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]: print(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]: print(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'1'</span> <span class="keyword">in</span> <span class="string">"123"</span>: print(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'1'</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">"123"</span>: print(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h1 id="7-隐含类型转换判空"><a class="markdownIt-Anchor" href="#7-隐含类型转换判空"></a> 7、隐含类型转换判空</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a, b, c, d = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], &#123;&#125;, <span class="string">''</span>, []</span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line">    print(<span class="string">"a not empty"</span>)</span><br><span class="line"><span class="keyword">if</span> b:</span><br><span class="line">    print(<span class="string">"b not empty"</span>)</span><br><span class="line"><span class="keyword">if</span> c:</span><br><span class="line">    print(<span class="string">"c not empty"</span>)</span><br><span class="line"><span class="keyword">if</span> d:</span><br><span class="line">    print(<span class="string">"d not empty"</span>)</span><br></pre></td></tr></table></figure><h1 id="8-判断多个条件是否成立anyall"><a class="markdownIt-Anchor" href="#8-判断多个条件是否成立anyall"></a> 8、判断多个条件是否成立:any，all</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> any([a &gt; <span class="number">1</span>, b &lt; <span class="number">2</span>, c == <span class="number">3</span>]): <span class="keyword">pass</span>  <span class="comment"># === a&gt;1 or b&lt;2 or c==3</span></span><br><span class="line"><span class="keyword">if</span> all([a &gt; <span class="number">1</span>, b &lt; <span class="number">2</span>, c == <span class="number">3</span>]): <span class="keyword">pass</span>  <span class="comment"># === a&gt;1 and b&lt;2 and c==3</span></span><br></pre></td></tr></table></figure><h1 id="9-列表推导式过滤"><a class="markdownIt-Anchor" href="#9-列表推导式过滤"></a> 9、列表推导式+过滤</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"a"</span>, <span class="number">4</span>, <span class="string">"v"</span>, <span class="number">5.5</span>]</span><br><span class="line">rs = [i <span class="keyword">for</span> i <span class="keyword">in</span> ls <span class="keyword">if</span> type(i) <span class="keyword">in</span> [int, float]]</span><br><span class="line">print(rs)</span><br></pre></td></tr></table></figure><h1 id="10-同时获取下标和数据enumerate"><a class="markdownIt-Anchor" href="#10-同时获取下标和数据enumerate"></a> 10、同时获取下标和数据：enumerate</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> index, num <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">    print(<span class="string">"索引为&#123;&#125;的数据是&#123;&#125;"</span>.format(index, num))</span><br></pre></td></tr></table></figure><h1 id="11-线程sleep"><a class="markdownIt-Anchor" href="#11-线程sleep"></a> 11、线程sleep</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)  <span class="comment"># 休眠1秒</span></span><br></pre></td></tr></table></figure><h1 id="12-print-输出覆盖"><a class="markdownIt-Anchor" href="#12-print-输出覆盖"></a> 12、print 输出覆盖</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i, n = <span class="number">0</span>, <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>: print(i + <span class="number">1</span>, end = <span class="string">'\r'</span>)</span><br></pre></td></tr></table></figure><h1 id="13-lambda匿名函数"><a class="markdownIt-Anchor" href="#13-lambda匿名函数"></a> 13、lambda匿名函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'xxx'</span>, <span class="string">'vx'</span>, <span class="string">'ccc'</span>]</span><br><span class="line">rs = filter(<span class="keyword">lambda</span> x:len(x) &lt;= <span class="number">1</span>, names)</span><br><span class="line">print(list(rs))  <span class="comment"># ['a', 'b']</span></span><br></pre></td></tr></table></figure><h1 id="14-yield生成器收集系列值不需要return"><a class="markdownIt-Anchor" href="#14-yield生成器收集系列值不需要return"></a> 14、yield生成器收集系列值，不需要return</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        a += i</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"><span class="comment"># [0, 1, 3, 6, 10, 15, 21, 28, 36, 45]</span></span><br><span class="line">print(list(fun()))</span><br></pre></td></tr></table></figure><h1 id="15-装饰器给函数添加插入日志性能测试等非核心功能"><a class="markdownIt-Anchor" href="#15-装饰器给函数添加插入日志性能测试等非核心功能"></a> 15、装饰器给函数添加插入日志，性能测试等非核心功能</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runtime</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">          start = time.time()</span><br><span class="line">          result = func(*args, **kwargs)</span><br><span class="line">          end = time.time()</span><br><span class="line">          print(<span class="string">"&#123;&#125; is called,used &#123;&#125;s."</span>.format(func.__name__, start - end))</span><br><span class="line">          <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> (wrapper)</span><br><span class="line"></span><br><span class="line"><span class="meta">@runtime</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">()</span>:</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">          time.sleep(<span class="number">1</span>)</span><br><span class="line">          s += i</span><br><span class="line">process()</span><br></pre></td></tr></table></figure><h1 id="16-内存拷贝"><a class="markdownIt-Anchor" href="#16-内存拷贝"></a> 16、内存拷贝</h1><p>使用：<code>copy</code>包中的<code>copy()函数</code>和<code>deepcopy()</code>函数</p><blockquote><p>16.1：赋值：指向同一块地址</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line">print(<span class="string">'a的内存地址 %s'</span> % id(a))      <span class="comment"># 4386109840</span></span><br><span class="line">print(<span class="string">'a1的内存地址 %s'</span> % id(a[<span class="number">1</span>]))  <span class="comment"># 4391711560</span></span><br><span class="line">b = a</span><br></pre></td></tr></table></figure><blockquote><p>16.2：浅拷贝：指向不同的引用，但是不同引用指向相同内容(只拷贝对象，但不拷贝对象内部的对象)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b = copy.copy(a)</span><br><span class="line">print(<span class="string">'a的内存地址 %s'</span> % id(a))      <span class="comment"># 4386109840</span></span><br><span class="line">print(<span class="string">'b的内存地址 %s'</span> % id(b))      <span class="comment"># 4386110200</span></span><br><span class="line">print(<span class="string">'a1的内存地址 %s'</span> % id(a[<span class="number">1</span>]))  <span class="comment"># 4391711560</span></span><br><span class="line">print(<span class="string">'b1的内存地址 %s'</span> % id(b[<span class="number">1</span>]))  <span class="comment"># 4391711560</span></span><br></pre></td></tr></table></figure><blockquote><p>16.3：深拷贝：对象及对象内部的对象都复制一份</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b = copy.deepcopy(a)</span><br><span class="line">print(<span class="string">'a的内存地址 %s'</span> % id(a))      <span class="comment"># 4386109840</span></span><br><span class="line">print(<span class="string">'b的内存地址 %s'</span> % id(b))      <span class="comment"># 4391729264</span></span><br><span class="line">print(<span class="string">'a1的内存地址 %s'</span> % id(a[<span class="number">1</span>]))  <span class="comment"># 4391711560</span></span><br><span class="line">print(<span class="string">'b1的内存地址 %s'</span> % id(b[<span class="number">1</span>]))  <span class="comment"># 4391711368</span></span><br></pre></td></tr></table></figure><h2 id="17-参数传递"><a class="markdownIt-Anchor" href="#17-参数传递"></a> 17、参数传递</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-多变量赋值&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-多变量赋值&quot;&gt;&lt;/a&gt; 1、多变量赋值&lt;/h1&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="Python" scheme="http://nextnight.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://nextnight.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
