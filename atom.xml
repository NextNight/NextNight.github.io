<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kala</title>
  
  <subtitle>Do Best Kala</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-26T05:37:38.189Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Best Kala</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javaadsdas</title>
    <link href="http://yoursite.com/2018/07/26/javaadsdas/"/>
    <id>http://yoursite.com/2018/07/26/javaadsdas/</id>
    <published>2018-07-26T03:39:50.000Z</published>
    <updated>2018-07-26T05:37:38.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><blockquote><p>你好呀。。。。。</p></blockquote><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>NexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改 主题配置文件，设定 rss 字段的值：</p><p>这样的使用在 2.0.1 中是没问题的，然而在 5.x 中却报错：Variable [tag] is not defined. 无法执行这个 script，后来发现了 default lang 不再是 groovy 而变成了 painless ，而 painless 的取值需要携带 key ，即 params.tag 这样才可以正常找到值。那么 groovy 为什么不再是 default 还被新版本中标记为 deprecated 了呢……要知道 groovy 之前替换掉 mvel 的理由是足够快而且简单……</p><p>先说一下什么是 sandboxed language</p><p>沙盒是在受限的安全环境中运行应用程序的一种做法，这种做法是要限制授予应用程序的代码访问权限。</p><p>像 groovy 和 JavaScript 这类脚本语言它们本身都不是 sandboxed，它们可以做很多系统级别的不止是读写、网络请求的操作，这样就给基于 JAVA 并且在运行中默认开启 The Security Manager 的 elasticsearch 带来很大的安全隐患，比如在脚本中随便加一句 infinite loop ，服务器可能就表现成拒绝访问的状态，所以在之前的版本中 elasticsearch 为 groovy 加入了沙盒控制一些权限，然而后面由于权限限制不够，还是出现了一些问题23333。</p><p>虽然 5.x 仍然内置 groovy ，但是考虑到 elasticsearch script 的来源，可以是 inline、store 、还有 file，前两个就不说了，一个是 query 中直接写进去的像我上面的例子，另一个也是以数据的形式存在某个 cluster state 的 _script 节点下，而 file 的形式是配置在 elasticsearch 的 config 文件夹中，所以从安全的角度，elasticsearch 5.x 只对 file script 默认允许执行 groovy 。</p><p>至于开头的 query ，如果不考虑安全性，例如默认我们的 elasticsearch 运行与一个相对隔离的环境下，如果还想用 inline groovy ，就可以为 groovy 单独开启一个配置 script.engine.groovy.inline: true 或者更宽泛的，针对所有 inline script 的配置script.inline: true，那么为上面的 script 声明一下 lang 就可以成功执行了（在 Python 和 Node.js 包中拼 dict 和 object 也是一样）：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;你好呀。。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="类别" scheme="http://yoursite.com/categories/%E7%B1%BB%E5%88%AB/"/>
    
    
      <category term="tg1" scheme="http://yoursite.com/tags/tg1/"/>
    
      <category term="tag2" scheme="http://yoursite.com/tags/tag2/"/>
    
  </entry>
  
  <entry>
    <title>python coding</title>
    <link href="http://yoursite.com/2018/07/25/python-coding/"/>
    <id>http://yoursite.com/2018/07/25/python-coding/</id>
    <published>2018-07-25T11:02:47.000Z</published>
    <updated>2018-07-25T15:35:55.518Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、 去重：drop_duplicates</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffm_unique[<span class="string">'order_f'</span>].drop_duplicates([<span class="string">'order_f'</span>],keep=<span class="string">'first'</span>,inplace=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p><strong>2、 索引某列并赋值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffm.loc[ffm[<span class="string">'user_m'</span>] &gt;= um[i], <span class="string">'user_m'</span>] = i</span><br><span class="line">ffm.loc[(ffm[<span class="string">'order_f'</span>] &gt;= of[i]) &amp; (ffm[<span class="string">'order_f'</span>] &lt; of[i + <span class="number">1</span>]), <span class="string">'order_f'</span>] = i</span><br></pre></td></tr></table></figure><p><strong>3、字符串时间转时间</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.to_datetime(df[<span class="string">'create_date'</span>])</span><br></pre></td></tr></table></figure><p><strong>3.1、时间差的天数，小时数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">starttime = datetime.datetime.now()</span><br><span class="line"><span class="comment">#long running</span></span><br><span class="line">endtime = datetime.datetime.now()</span><br><span class="line">cha_seconds = (endtime – starttime).seconds</span><br><span class="line">cha_hours   = (endtime – starttime).hours</span><br><span class="line">cha_days = (endtime – starttime).days</span><br></pre></td></tr></table></figure><p><strong>4、多个列的每一行最大，最小值,均值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user[[<span class="string">'create_date1'</span>,<span class="string">'create_date2'</span>,<span class="string">'create_date3'</span>]].max(axis=<span class="number">1</span>)</span><br><span class="line">user[[<span class="string">'create_date1'</span>,<span class="string">'create_date2'</span>,<span class="string">'create_date3'</span>]].min(axis=<span class="number">1</span>)</span><br><span class="line">user[[<span class="string">'create_date1'</span>,<span class="string">'create_date2'</span>,<span class="string">'create_date3'</span>]].mean(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>5、数据分箱：<code>pd.cut()</code>,<code>pd.qcut()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = pd.cut(ffm[<span class="string">'order_f'</span>], bins=[<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">0.8</span>, <span class="number">2</span>, <span class="number">20</span>, <span class="number">1000</span>], labels=np.arange(<span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>))</span><br><span class="line">a.value_counts().plot(kind=<span class="string">'bar'</span>, title=<span class="string">'a'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>6、对某列排序:<code>sort_values()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffm.sort_values(by=<span class="string">'order_f'</span>, inplace=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p><strong>7、对索引排序:<code>sort_index()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffm.sort_index(inpalce=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p><strong>8、数据投影:不改变分布，直接投影到0-9</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffm[<span class="string">'order_f'</span>] = np.round(minmax_scale(ffm[<span class="string">'order_f'</span>])*<span class="number">9</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      阿斯达大
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="test" scheme="http://yoursite.com/categories/python/test/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="coding" scheme="http://yoursite.com/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Python代码片段</title>
    <link href="http://yoursite.com/2018/07/25/Python%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>http://yoursite.com/2018/07/25/Python代码片段/</id>
    <published>2018-07-25T08:07:19.000Z</published>
    <updated>2018-07-25T08:09:10.137Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、 去重：drop_duplicates</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffm_unique[<span class="string">'order_f'</span>].drop_duplicates([<span class="string">'order_f'</span>],keep=<span class="string">'first'</span>,inplace=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p><strong>2、 索引某列并赋值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffm.loc[ffm[<span class="string">'user_m'</span>] &gt;= um[i], <span class="string">'user_m'</span>] = i</span><br><span class="line">ffm.loc[(ffm[<span class="string">'order_f'</span>] &gt;= of[i]) &amp; (ffm[<span class="string">'order_f'</span>] &lt; of[i + <span class="number">1</span>]), <span class="string">'order_f'</span>] = i</span><br></pre></td></tr></table></figure><p><strong>3、字符串时间转时间</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.to_datetime(df[<span class="string">'create_date'</span>])</span><br></pre></td></tr></table></figure><p><strong>3.1、时间差的天数，小时数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">starttime = datetime.datetime.now()</span><br><span class="line"><span class="comment">#long running</span></span><br><span class="line">endtime = datetime.datetime.now()</span><br><span class="line">cha_seconds = (endtime – starttime).seconds</span><br><span class="line">cha_hours   = (endtime – starttime).hours</span><br><span class="line">cha_days = (endtime – starttime).days</span><br></pre></td></tr></table></figure><p><strong>4、多个列的每一行最大，最小值,均值</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user[[<span class="string">'create_date1'</span>,<span class="string">'create_date2'</span>,<span class="string">'create_date3'</span>]].max(axis=<span class="number">1</span>)</span><br><span class="line">user[[<span class="string">'create_date1'</span>,<span class="string">'create_date2'</span>,<span class="string">'create_date3'</span>]].min(axis=<span class="number">1</span>)</span><br><span class="line">user[[<span class="string">'create_date1'</span>,<span class="string">'create_date2'</span>,<span class="string">'create_date3'</span>]].mean(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>5、数据分箱：<code>pd.cut()</code>,<code>pd.qcut()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = pd.cut(ffm[<span class="string">'order_f'</span>], bins=[<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">0.8</span>, <span class="number">2</span>, <span class="number">20</span>, <span class="number">1000</span>], labels=np.arange(<span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>))</span><br><span class="line">a.value_counts().plot(kind=<span class="string">'bar'</span>, title=<span class="string">'a'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><strong>6、对某列排序:<code>sort_values()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffm.sort_values(by=<span class="string">'order_f'</span>, inplace=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p><strong>7、对索引排序:<code>sort_index()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffm.sort_index(inpalce=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p><strong>8、数据投影:不改变分布，直接投影到0-9</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffm[<span class="string">'order_f'</span>] = np.round(minmax_scale(ffm[<span class="string">'order_f'</span>])*<span class="number">9</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;1、 去重：drop_duplicates&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span
      
    
    </summary>
    
    
      <category term="python coding" scheme="http://yoursite.com/tags/python-coding/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/24/hello-world/"/>
    <id>http://yoursite.com/2018/07/24/hello-world/</id>
    <published>2018-07-24T15:34:42.569Z</published>
    <updated>2018-07-24T15:34:42.569Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
