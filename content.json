{"meta":{"title":"Kala","subtitle":"Do Best Kala","description":"DeepLearn MeachineLearn","author":"Best Kala","url":"http://nextnight.github.io"},"pages":[{"title":"友情链接","date":"2018-07-30T08:32:19.954Z","updated":"2018-07-27T09:13:16.682Z","comments":true,"path":"links/index.html","permalink":"http://nextnight.github.io/links/index.html","excerpt":"","text":""},{"title":"书单","date":"2018-07-30T08:32:01.880Z","updated":"2018-07-27T09:13:16.681Z","comments":false,"path":"books/index.html","permalink":"http://nextnight.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-07-30T08:32:19.946Z","updated":"2018-07-27T09:13:16.681Z","comments":false,"path":"categories/index.html","permalink":"http://nextnight.github.io/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2018-07-30T08:31:48.135Z","updated":"2018-07-27T09:13:16.681Z","comments":false,"path":"about/index.html","permalink":"http://nextnight.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"Repositories","date":"2018-07-30T08:32:19.964Z","updated":"2018-07-27T09:13:16.682Z","comments":false,"path":"repository/index.html","permalink":"http://nextnight.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-07-30T08:32:19.971Z","updated":"2018-07-27T09:13:16.682Z","comments":false,"path":"tags/index.html","permalink":"http://nextnight.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"algorithm-array","slug":"algorithm-array","date":"2018-07-31T15:21:37.000Z","updated":"2018-08-01T02:48:48.317Z","comments":true,"path":"2018/07/31/algorithm-array/","link":"","permalink":"http://nextnight.github.io/2018/07/31/algorithm-array/","excerpt":"","text":"整数求和 Q: 给一个非负整数，求每一位的数字加和，得到之后的数字在把每一位进行加和，直到结果为一位数 E: 比如：83-&gt;8+3=11-&gt;1+1=2,输出2 12345678910111213141516def a_num_sum(num): \"\"\" Q: 给一个非负整数，求每一位的数字加和，得到之后的数字在把每一位进行加和，直到结果为一位数 E: 比如：83-&gt;8+3=11-&gt;1+1=2,输出2 case: 尾递归，进入下一层不再需要上一层的环境，因为这个递归完成后不再需要干其他的事，所以直接return这个递归，就会得到最内层的结果 \"\"\" # 如果要输出每次计算的值 # print(num) # 83 11 2 # if num &gt;= 10: # a_num_sum(sum([int(i) for i in list(str(num))])) # print(num) # 2,11,83 if num &lt; 10: return num if num &gt;= 10: return a_num_sum(sum([int(i) for i in list(str(num))])) 两数之和等于目标值 Q:给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。 E:[2,7,3,11] tag:9 R:[0,1] E:[3,3] tag:6 R:[0,1] 1234567891011121314def two_sum(dt, tag): \"\"\" Q:给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。 E:[2,7,3,11] tag:9 \"\"\" # for i, item in enumerate(dt): # if (tag - item) in dt and dt.index(tag - item)!=i: # return [i, dt.index(tag - item)] # 基础暴力解法 for i,it in enumerate(dt): for j,jt in enumerate(dt): if it+jt==tag and i!=j: return [i,j] # hashmap，dict解法","categories":[{"name":"algorithm","slug":"algorithm","permalink":"http://nextnight.github.io/categories/algorithm/"}],"tags":[{"name":"array","slug":"array","permalink":"http://nextnight.github.io/tags/array/"},{"name":"string","slug":"string","permalink":"http://nextnight.github.io/tags/string/"}]},{"title":"不忘初心","slug":"不忘初心","date":"2018-07-30T14:16:33.000Z","updated":"2018-08-01T02:47:48.849Z","comments":true,"path":"2018/07/30/不忘初心/","link":"","permalink":"http://nextnight.github.io/2018/07/30/不忘初心/","excerpt":"","text":"不忘初心，方得始终 初心易守，始终难得","categories":[],"tags":[]}]}