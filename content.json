{"meta":{"title":"Kala","subtitle":"Do Best Kala","description":"DeepLearn MeachineLearn","author":"Best Kala","url":"http://yoursite.com"},"pages":[{"title":"关于","date":"2018-07-30T08:31:48.135Z","updated":"2018-07-27T09:13:16.681Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2018-07-30T08:32:01.880Z","updated":"2018-07-27T09:13:16.681Z","comments":false,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-07-30T08:32:19.946Z","updated":"2018-07-27T09:13:16.681Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-07-30T08:32:19.954Z","updated":"2018-07-27T09:13:16.682Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-07-30T08:32:19.964Z","updated":"2018-07-27T09:13:16.682Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-07-30T08:32:19.971Z","updated":"2018-07-27T09:13:16.682Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"templeTest","slug":"templeTest","date":"2018-07-30T08:49:28.000Z","updated":"2018-07-30T10:51:21.911Z","comments":true,"path":"2018/07/30/templeTest/","link":"","permalink":"http://yoursite.com/2018/07/30/templeTest/","excerpt":"","text":"😊","categories":[{"name":"类别","slug":"类别","permalink":"http://yoursite.com/categories/类别/"}],"tags":[{"name":"tg1","slug":"tg1","permalink":"http://yoursite.com/tags/tg1/"},{"name":"tag2","slug":"tag2","permalink":"http://yoursite.com/tags/tag2/"}]},{"title":"testlatex","slug":"testlatex","date":"2018-07-27T10:27:27.000Z","updated":"2018-07-27T10:28:47.391Z","comments":true,"path":"2018/07/27/testlatex/","link":"","permalink":"http://yoursite.com/2018/07/27/testlatex/","excerpt":"","text":"f(x1,xx,…,xn)=x12+x22+⋯+xn2f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 f(x1​,xx​,…,xn​)=x12​+x22​+⋯+xn2​ 1(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2","categories":[{"name":"test","slug":"test","permalink":"http://yoursite.com/categories/test/"}],"tags":[{"name":"test","slug":"test","permalink":"http://yoursite.com/tags/test/"},{"name":"ttes2","slug":"ttes2","permalink":"http://yoursite.com/tags/ttes2/"}]},{"title":"MySQL","slug":"mysql","date":"2018-07-26T03:39:50.000Z","updated":"2018-07-30T08:45:26.823Z","comments":true,"path":"2018/07/26/mysql/","link":"","permalink":"http://yoursite.com/2018/07/26/mysql/","excerpt":"","text":"Mysql 烦断肠的字符集/反复安装失败 作为一个新手在操作数据库的时候，最烦的就是安装数据库，mysql相对来说，比较简单，不象oracle,也许你安装坏了，可能要重做系统。但是mysql在安装时候最烦的就是字符集不统一的问题和安装失败发现，再次安装怎么都安不上。 一、对于解决mysql反复安装失败的问题 1、重新点击安装程序，因为安装过一次，所以这个程序就会出现修复和卸载两个选项我们可以选择卸载。 2、如果上一步，未解决，就需要去C盘，和安装目录下手动删除mysql的文件夹，然后再次执行1中的操作。 以上两步操作足够制服安装失败的问题，安装过程中也许会出现端口占用的问题，此时修改一下3306端口就可以，以后再使用的时候记住自己设置的端口。 二、对于解决mysql字符集不统一导致乱码的问题 mysql的字符集有很多，数据表的/数据库的/客户端的/服务器的/文件系统的。。。等等，因为我们中文要使用gbk/gbk132/utf-8的字符集，但是数据库默认的不是utf-8. 1、第一个设置字符集的地方在安装数据库的时候，这一步最为关键，设置的是默认字符集。 2、第二个在创建数据库的时候 3、第三个在创建表的时候【不过一般不会写，会跟随默认的字符集】 如果以上两步都没有设置，没关系，以下操作轻松搞定字符集 1、打开mysql的终端查询字符集设置： 12345678910111213mysql&gt; SHOW VARIABLES LIKE '%char%'; +--------------------------+---------------------------------------------------------+ | Variable_name | Value | +--------------------------+---------------------------------------------------------+ | character_set_client | utf8 | | character_set_connection | utf8 | | character_set_database | utf8 | | character_set_filesystem | binary | | character_set_results | utf8 | | character_set_server | utf8 | | character_set_system | utf8 | | character_sets_dir | C:\\Program Files\\MySQL\\MySQL Server 5.6\\share\\charsets\\ | +--------------------------+---------------------------------------------------------+ 2、所有的字符集列表，直接使用以下语句修改，如下： 12345678mysql&gt; SET character_set_client = utf8 ; mysql&gt; SET character_set_connection = utf8 ; mysql&gt; SET character_set_database = utf8 ; mysql&gt; SET character_set_results = utf8 ; mysql&gt; SET character_set_server = utf8 ; mysql&gt; SET collation_connection = utf8 ; mysql&gt; SET collation_database = utf8 ; mysql&gt; SET collation_server = utf8 ; Mysql 常见的运算符 mysql中同样提供了常用的运算符，用于数据的运算，以下内容来源 1、算数运算符 算数运算符常用在对数值数据做算术运算，例如：一个要给员工发薪水，我们记录的是考勤和基本薪资：user_info这张表存储了基本工资base_salary，考勤天数attendance_day，应上班天数all_day,员工的薪资就是 base_salary*(attendance_day/all_day)此时算术运算就起到了作用。 123456mysql&gt; select 1+2; 加 mysql&gt; select 2-1; 减 mysql&gt; select 2*3; 乘 mysql&gt; select 5/3; 除 mysql&gt; SELECT 5 DIV 2; 商 mysql&gt; select 5%2,mod(5,2);模 2、比较运算符 比较运算符经常会用到，在查询的时候，用做条件的判断，范围的判断，都要用到比较运算符。 1234567891011121314151617181920212223242526等于 mysql&gt; select 1=0,1=1,null=null; 不等于 mysql&gt; select 1&lt;&gt;0,1&lt;&gt;1,null&lt;&gt;null; 完全等于 mysql&gt; select 1&lt;=&gt;1,2&lt;=&gt;0,0&lt;=&gt;0,null&lt;=&gt;null; 小于 mysql&gt; select 'a'&lt;'b','a'&lt;'a','a'&lt;'c',1&lt;2; 小于等于 mysql&gt; select 'bdf'&lt;='b','b'&lt;='b',0&lt;1; 大于 mysql&gt; select 'a'&gt;'b','abc'&gt;'a',1&gt;0; 大于等于 mysql&gt; select 'a'&gt;='b','abc'&gt;='a',1&gt;=0,1&gt;=1; BETWEEN AND :在某个范围内 mysql&gt; select 10 between 10 and 20, 9 between 10 and 20; IN ：在某个范围内 mysql&gt; select 1 in (1,2,3), 't' in ('t','a','b','l','e'), 0 in (1,2); IS NULL mysql&gt; select 0 is null,null is null; IS NOT NULL mysql&gt; select 0 is not null, null is not null; LIKE ：模糊匹配 mysql&gt; select 123456 like '123%', 123456 like '%123%', 123456 like '%321%'; REGEXP :正则匹配 mysql&gt; select 'abcdef' regexp 'ab', 'abcdefg' regexp 'k'; -- 1 0 表示abcdef中匹配到ab一次，abcdefg匹配到k 0次 3、逻辑运算符 123456789101112非 mysql&gt; select not 0, not 1, not null; -- 1 0 (null) mysql&gt; select ! 0, ! 1, ! null; -- 1 0 (null) 与 mysql&gt; select (1 and 1), (0 and 1), (3 and 1), (1 and null); mysql&gt; select (1 &amp;&amp; 1), (0 &amp;&amp; 1), (3 &amp;&amp; 1), (1 &amp;&amp; null); 或 mysql&gt; select (1 or 0), (0 or 0), (1 or null), (1 or 1), (null or null); mysql&gt; select (1 || 0), (0 || 0), (1 || null), (1 || 1), (null || null); 异或 mysql&gt; select (1 xor 1), (0 xor 0), (1 xor 0), (0 xor 1), (null xor 1); mysql&gt; select (1 ^ 1), (0 ^ 0), (1 ^ 0), (0 ^ 1), (null ^ 1); 4、位运算符 12345678910111213位与 mysql&gt; select 2&amp;3; mysql&gt; select 2&amp;3&amp;4; 位或 mysql&gt; select 2|3; 位异或 mysql&gt; select 2^3; 位取反 mysql&gt; select ~1,~18446744073709551614; 位右移 mysql&gt; select 100&gt;&gt;3; 位左移 mysql&gt; select 100&lt;&lt;3; 5.运算符优先级顺序 12345678910111213141516最高优先级 := 1 ||, OR, XOR 2 &amp;&amp;, AND 3 BETWEEN, CASE, WHEN, THEN, ELSE 4 =, &lt;=&gt;, &gt;=, &gt;, &lt;=, &lt;, &lt;&gt;, !=, IS, LIKE, REGEXP, IN 5 | 6 &amp; 7 &lt;&lt;, &gt;&gt; 8 -, + 9 *, /, DIV, %, MOD 10 ^ 11 - (unary minus), ~ (unary bit inversion) 12 !, NOT 最低优先级 BINARY, COLLATE常用的必须熟悉，不常用的，暂时记者，也许有一天就有用了。。 Mysql 常用的函数 MySQL数据库中提供了很丰富的函数。MySQL函数包括数学函数、字符串函数、日期和时间函数、条件判断函数、系统信息函数、加密函数、格式化函数等。通过这些函数，可以简化用户的操作。以下内容来源 一、数学函数 12345678910111213141516ABS(x) 返回x的绝对值 BIN(x) 返回x的二进制（OCT返回八进制，HEX返回十六进制） CEILING(x) 返回大于x的最小整数值 EXP(x) 返回值e（自然对数的底）的x次方 FLOOR(x) 返回小于x的最大整数值 GREATEST(x1,x2,...,xn) 返回集合中最大的值 LEAST(x1,x2,...,xn) 返回集合中最小的值 LN(x) 返回x的自然对数 LOG(x,y) 返回x的以y为底的对数 MOD(x,y) 返回x/y的模（余数） PI() 返回pi的值（圆周率） RAND() 返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。 ROUND(x,y) 返回参数x的四舍五入的有y位小数的值 SIGN(x) 返回代表数字x的符号的值 SQRT(x) 返回一个数的平方根 TRUNCATE(x,y) 返回数字x截短为y位小数的结果 二、聚合函数(常用于GROUP BY从句的SELECT查询中) 123456AVG(col) 返回指定列的平均值 COUNT(col) 返回指定列中非NULL值的个数 MIN(col) 返回指定列的最小值 MAX(col) 返回指定列的最大值 SUM(col) 返回指定列的所有值之和 GROUP_CONCAT(col) 返回由属于一组的列值连接组合而成的结果 三、字符串函数 12345678910111213141516171819ASCII(char) 返回字符的ASCII码值 BIT_LENGTH(str) 返回字符串的比特长度 CONCAT(s1,s2...,sn) 将s1,s2...,sn连接成字符串 CONCAT_WS(sep,s1,s2...,sn)将s1,s2...,sn连接成字符串，并用sep字符间隔 INSERT(str,x,y,instr) 将字符串str从第x位置开始，y个字符长的子串替换为字符串instr，返回结果 FIND_IN_SET(str,list) 分析逗号分隔的list列表，如果发现str，返回str在list中的位置 LCASE(str)或LOWER(str) 返回将字符串str中所有字符改变为小写后的结果 LEFT(str,x) 返回字符串str中最左边的x个字符 LENGTH(s) 返回字符串str中的字符数 LTRIM(str) 从字符串str中切掉开头的空格 POSITION(substr,str) 返回子串substr在字符串str中第一次出现的位置 QUOTE(str) 用反斜杠转义str中的单引号 REPEAT(str,srchstr,rplcstr)返回字符串str重复x次的结果 REVERSE(str) 返回颠倒字符串str的结果 RIGHT(str,x) 返回字符串str中最右边的x个字符 RTRIM(str) 返回字符串str尾部的空格 STRCMP(s1,s2) 比较字符串s1和s2 TRIM(str) 去除字符串首部和尾部的所有空格 UCASE(str)或UPPER(str) 返回将字符串str中所有字符转变为大写后的结果 四、日期和时间函数 1234567891011121314151617181920212223242526CURDATE()或CURRENT_DATE() 返回当前的日期 CURTIME()或CURRENT_TIME() 返回当前的时间 DATE_ADD(date,INTERVAL int keyword) 返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化),如：SELECTDATE_ADD(CURRENT_DATE,INTERVAL 6 MONTH); DATE_FORMAT(date,fmt) 依照指定的fmt格式格式化日期date值 DATE_SUB(date,INTERVAL int keyword) 返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化),如：SELECTDATE_SUB(CURRENT_DATE,INTERVAL 6 MONTH); DAYOFWEEK(date) 返回date所代表的一星期中的第几天(1~7) DAYOFMONTH(date) 返回date是一个月的第几天(1~31) DAYOFYEAR(date) 返回date是一年的第几天(1~366) DAYNAME(date) 返回date的星期名，如：SELECT DAYNAME(CURRENT_DATE); FROM_UNIXTIME(ts,fmt) 根据指定的fmt格式，格式化UNIX时间戳ts HOUR(time) 返回time的小时值(0~23) MINUTE(time) 返回time的分钟值(0~59) MONTH(date) 返回date的月份值(1~12) MONTHNAME(date) 返回date的月份名，如：SELECT MONTHNAME(CURRENT_DATE); NOW() 返回当前的日期和时间 QUARTER(date) 返回date在一年中的季度(1~4)，如SELECT QUARTER(CURRENT_DATE); WEEK(date) 返回日期date为一年中第几周(0~53) YEAR(date) 返回日期date的年份(1000~9999) 返回当前日期：SELECT FROM_UNIXTIME(UNIX_TIMESTAMP()); mysql&gt; SELECT FROM_UNIXTIME(UNIX_TIMESTAMP()); +---------------------------------+ | FROM_UNIXTIME(UNIX_TIMESTAMP()) | +---------------------------------+ | 2017-09-20 17:44:50 | +---------------------------------+ 五、加密函数 123456789101112131415AES_ENCRYPT(str,key) 返回用密钥key对字符串str利用高级加密标准算法加密后的结果，调用AES_ENCRYPT的结果是一个二进制字符串，以BLOB类型存储 AES_DECRYPT(str,key) 返回用密钥key对字符串str利用高级加密标准算法解密后的结果 DECODE(str,key) 使用key作为密钥解密加密字符串str ENCRYPT(str,salt) 使用UNIXcrypt()函数，用关键词salt(一个可以惟一确定口令的字符串，就像钥匙一样)加密字符串str ENCODE(str,key) 使用key作为密钥加密字符串str，调用ENCODE()的结果是一个二进制字符串，它以BLOB类型存储 MD5() 计算字符串str的MD5校验和 PASSWORD(str) 返回字符串str的加密版本，这个加密过程是不可逆转的，和UNIX密码加密过程使用不同的算法。 SHA() 计算字符串str的安全散列算法(SHA)校验 mysql&gt; select md5('123213') +----------------------------------+ | md5('123213') | +----------------------------------+ | 8ad3fac6c6b3528499d347d924443abb | +----------------------------------+ ** 六、MySQL控制流函数：** 12345CASE WHEN[test1] THEN [result1]...ELSE [default] END 如果testN是真，则返回resultN，否则返回default CASE [test] WHEN[val1] THEN [result]...ELSE [default]END 如果test和valN相等，则返回resultN，否则返回default IF(test,t,f) 如果test是真，返回t；否则返回f IFNULL(arg1,arg2) 如果arg1不是空，返回arg1，否则返回arg2 NULLIF(arg1,arg2) 如果arg1=arg2返回NULL；否则返回arg1 这些函数的第一个是IFNULL()，它有两个参数，并且对第一个参数进行判断。如果第一个参数不是NULL，函数就会向调用者返回第一个参数；如果是NULL,将返回第二个参数。 七、格式化函数 123456789101112DATE_FORMAT(date,fmt) 依照字符串fmt格式化日期date值 FORMAT(x,y) 把x格式化为以逗号隔开的数字序列，y是结果的小数位数 INET_ATON(ip) 返回IP地址的数字表示 INET_NTOA(num) 返回数字所代表的IP地址 TIME_FORMAT(time,fmt) 依照字符串fmt格式化时间time值 mysql&gt; SELECT DATE_FORMAT(NOW(),'%W,%D %M %Y %r'); +-------------------------------------------+ | DATE_FORMAT(NOW(),'%W,%D %M %Y %r') | +-------------------------------------------+ | Wednesday,20th September 2017 05:54:02 PM | +-------------------------------------------+ 其中最简单的是FORMAT()函数，它可以把大的数值格式化为以逗号间隔的易读的序列。 八、类型转化函数 为了进行数据类型转化，MySQL提供了CAST()函数，它可以把一个值转化为指定的数据类型。类型有：BINARY,CHAR,DATE,TIME,DATETIME,SIGNED,UNSIGNED 九、系统信息函数 123456DATABASE() 返回当前数据库名 BENCHMARK(count,expr) 将表达式expr重复运行count次 CONNECTION_ID() 返回当前客户的连接ID FOUND_ROWS() 返回最后一个SELECT查询进行检索的总行数 USER()或SYSTEM_USER() 返回当前登陆用户名 VERSION() 返回MySQL服务器的版本 测试列表 为了进行数据类型转化 为了进行数据类型转化 为了进行数据类型转化 为了进行数据类型转化 \b江上如花 …待续。。。","categories":[{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/categories/mysql/"}],"tags":[{"name":"tg1","slug":"tg1","permalink":"http://yoursite.com/tags/tg1/"},{"name":"tag2","slug":"tag2","permalink":"http://yoursite.com/tags/tag2/"}]},{"title":"python coding","slug":"python-coding","date":"2018-07-25T11:02:47.000Z","updated":"2018-07-27T08:25:22.702Z","comments":true,"path":"2018/07/25/python-coding/","link":"","permalink":"http://yoursite.com/2018/07/25/python-coding/","excerpt":"","text":"『Cmd 技术渲染的沙箱页面，点击此处编写自己的文档』 Cmd Markdown 简明语法手册 标签： Cmd-Markdown 1. 斜体和粗体 使用 * 和 ** 表示斜体和粗体。 示例： 这是 斜体，这是 粗体。 2. 分级标题 使用 === 表示一级标题，使用 — 表示二级标题。 示例： 1234567这是一个一级标题============================这是一个二级标题--------------------------------------------------### 这是一个三级标题 你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。 3. 外链接 使用 [描述](链接地址) 为文字增加外链接。 示例： 这是去往 本人博客 的链接。 4. 无序列表 使用 *，+，- 表示无序列表。 示例： 无序列表项 一 无序列表项 二 无序列表项 三 5. 有序列表 使用数字和点表示有序列表。 示例： 有序列表项 一 有序列表项 二 有序列表项 三 6. 文字引用 使用 &gt; 表示文字引用。 示例： 野火烧不尽，春风吹又生。 7. 行内代码块 使用 `代码` 表示行内代码块。 示例： 让我们聊聊 html。 8. 代码块 使用 四个缩进空格 表示代码块。 示例： 这是一个代码块，此行左侧有四个不可见的空格。 9. 插入图像 使用 ![描述](图片链接地址) 插入图像。 示例： Cmd Markdown 高阶语法手册 1. 内容目录 在段落中填写 [TOC] 以显示全文内容的目录结构。 [TOC] 2. 标签分类 在编辑区任意行的列首位置输入以下代码给文稿标签： 标签： 数学 英语 Markdown 或者 Tags： 数学 英语 Markdown 3. 删除线 使用 ~~ 表示删除线。 这是一段错误的文本。 4. 注脚 使用 [^keyword] 表示注脚。 这是一个注脚[1]的样例。 这是第二个注脚[2]的样例。 5. LaTeX 公式 $ 表示行内公式： 质能守恒方程可以用一个很简洁的方程式 E=mc2E=mc^2E=mc2 来表达。 表示整行公式： $$\\sum_{i=1}^n a_i=0 f(x1,xx,…,xn)=x12+x22+⋯+xn2f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 f(x1​,xx​,…,xn​)=x12​+x22​+⋯+xn2​ ∑k=0j−1γ^kjzk\\sum^{j-1}_{k=0}{\\widehat{\\gamma}_{kj} z_k} k=0∑j−1​γ​kj​zk​ 1\\sum^&#123;j-1&#125;_&#123;k=0&#125;&#123;\\widehat&#123;\\gamma&#125;_&#123;kj&#125; z_k&#125; 访问 MathJax 参考更多使用方法。 6. 加强的代码块 支持四十一种编程语言的语法高亮的显示，行号显示。 非代码示例： 1$ sudo apt-get install vim-gnome Python 示例： 123456789101112@requires_authorizationdef somefunc(param1='', param2=0): '''A docstring''' if param1 &gt; param2: # interesting print 'Greater' return (param2 - param1 + 1) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt''' JavaScript 示例： 1234567891011121314151617/*** nth element in the fibonacci series.* @param n &gt;= 0* @return the nth element, &gt;= 0.*/function fib(n) &#123; var a = 1, b = 1; var tmp; while (--n &gt;= 0) &#123; tmp = a; a += b; b = tmp; &#125; return a;&#125;document.write(fib(10)); 7. 流程图 示例 12345678910st=&gt;start: Start:&gt;https://www.zybuluo.comio=&gt;inputoutput: verificationop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?sub=&gt;subroutine: Your Subroutinee=&gt;endst-&gt;io-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;sub-&gt;io 更多语法参考：流程图语法参考 8. 序列图 示例 1 123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 示例 2 12345Title: Here is a titleA-&gt;B: Normal lineB--&gt;C: Dashed lineC-&gt;&gt;D: Open arrowD--&gt;&gt;A: Dashed open arrow 更多语法参考：序列图语法参考 9. 甘特图 甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。 12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 更多语法参考：甘特图语法参考 10. Mermaid 流程图 1234A[Hard edge] --&gt;|Link text| B(Round edge)B --&gt; C&#123;Decision&#125;C --&gt;|One| D[Result one]C --&gt;|Two| E[Result two] 更多语法参考：Mermaid 流程图语法参考 11. Mermaid 序列图 1234Alice-&gt;John: Hello John, how are you?loop every minute John--&gt;Alice: Great!end 更多语法参考：Mermaid 序列图语法参考 12. 表格支持 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 13. 定义型列表 名词 1 定义 1（左侧有一个可见的冒号和四个不可见的空格） 代码块 2 这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格） 代码块（左侧有八个不可见的空格） 14. Html 标签 本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格： &lt;table&gt; &lt;tr&gt; &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt; &lt;th&gt;星期一&lt;/th&gt; &lt;th&gt;星期二&lt;/th&gt; &lt;th&gt;星期三&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;李强&lt;/td&gt; &lt;td&gt;张明&lt;/td&gt; &lt;td&gt;王平&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 值班人员 星期一 星期二 星期三 李强 张明 王平 15. 内嵌图标 本站的图标系统对外开放，在文档中输入 &lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt; 即显示微博的图标： 替换 上述 i 标签 内的 icon-weibo 以显示不同的图标，例如： &lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt; 即显示人人的图标： 更多的图标和玩法可以参看 font-awesome 官方网站。 16. 待办事宜 Todo 列表 使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如： - [ ] **Cmd Markdown 开发** - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 - [ ] 支持以 PDF 格式导出文稿 - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments) - [x] 改进 LaTex 功能 - [x] 修复 LaTex 公式渲染问题 - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers) - [ ] **七月旅行准备** - [ ] 准备邮轮上需要携带的物品 - [ ] 浏览日本免税店的物品 - [x] 购买蓝宝石公主号七月一日的船票 对应显示如下待办事宜 Todo 列表： [ ] Cmd Markdown 开发 [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 [ ] 支持以 PDF 格式导出文稿 [x] 新增Todo列表功能 语法参考 [x] 改进 LaTex 功能 [x] 修复 LaTex 公式渲染问题 [x] 新增 LaTex 公式编号功能 语法参考 [ ] 七月旅行准备 [ ] 准备邮轮上需要携带的物品 [ ] 浏览日本免税店的物品 [x] 购买蓝宝石公主号七月一日的船票 这是一个 注脚 的 文本。 ↩︎ 这是另一个 注脚 的 文本。 ↩︎","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"test","slug":"python/test","permalink":"http://yoursite.com/categories/python/test/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"coding","slug":"coding","permalink":"http://yoursite.com/tags/coding/"}]},{"title":"Python代码片段","slug":"Python代码片段","date":"2018-07-25T08:07:19.000Z","updated":"2018-07-25T08:09:10.137Z","comments":true,"path":"2018/07/25/Python代码片段/","link":"","permalink":"http://yoursite.com/2018/07/25/Python代码片段/","excerpt":"","text":"1、 去重：drop_duplicates 1ffm_unique['order_f'].drop_duplicates(['order_f'],keep='first',inplace=True) 2、 索引某列并赋值 12ffm.loc[ffm['user_m'] &gt;= um[i], 'user_m'] = iffm.loc[(ffm['order_f'] &gt;= of[i]) &amp; (ffm['order_f'] &lt; of[i + 1]), 'order_f'] = i 3、字符串时间转时间 1pd.to_datetime(df['create_date']) 3.1、时间差的天数，小时数 123456starttime = datetime.datetime.now()#long runningendtime = datetime.datetime.now()cha_seconds = (endtime – starttime).secondscha_hours = (endtime – starttime).hourscha_days = (endtime – starttime).days 4、多个列的每一行最大，最小值,均值 123user[['create_date1','create_date2','create_date3']].max(axis=1)user[['create_date1','create_date2','create_date3']].min(axis=1)user[['create_date1','create_date2','create_date3']].mean(axis=1) 5、数据分箱：pd.cut(),pd.qcut() 123a = pd.cut(ffm['order_f'], bins=[0, 0.5, 0.8, 2, 20, 1000], labels=np.arange(1, 6, 1))a.value_counts().plot(kind='bar', title='a')plt.show() 6、对某列排序:sort_values() 1ffm.sort_values(by='order_f', inplace=True) 7、对索引排序:sort_index() 1ffm.sort_index(inpalce=True) 8、数据投影:不改变分布，直接投影到0-9 1ffm['order_f'] = np.round(minmax_scale(ffm['order_f'])*9)","categories":[],"tags":[{"name":"python coding","slug":"python-coding","permalink":"http://yoursite.com/tags/python-coding/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-07-24T15:34:42.569Z","updated":"2018-07-24T15:34:42.569Z","comments":true,"path":"2018/07/24/hello-world/","link":"","permalink":"http://yoursite.com/2018/07/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}